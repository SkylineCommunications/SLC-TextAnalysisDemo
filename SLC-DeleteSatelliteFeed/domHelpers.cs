//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
	using System;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.ManagerStore;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Sections;

	/// <summary>
	/// Serves as the abstract base class for wrapper classes that provide access to DOM instances.
	/// The <see cref="DomInstanceBase"/> class defines the common functionality and structure for interacting with DOM objects stored in the database, serving as a foundation for derived classes that wrap specific DOM instances.
	/// </summary>
	public abstract class DomInstanceBase : IEquatable<DomInstanceBase>
	{
		protected DomInstanceBase(DomDefinitionId definitionId)
		{
			if (definitionId == null)
				throw new ArgumentNullException("definitionId");
			domInstance = new DomInstance { DomDefinitionId = definitionId };
		}

		protected DomInstanceBase(DomDefinitionId definitionId, Guid id)
		{
			if (definitionId == null)
				throw new ArgumentNullException("definitionId");
			if (id == Guid.Empty)
				throw new ArgumentException("The id cannot be an empty guid", nameof(id));
			domInstance = new DomInstance
			{
				ID = new DomInstanceId(id)
				{ ModuleId = definitionId.ModuleId },
				DomDefinitionId = definitionId
			};
		}

		protected DomInstanceBase(DomInstance domInstance)
		{
			if (domInstance == null)
				throw new ArgumentNullException("domInstance");
			this.domInstance = domInstance;
		}

		/// <summary>
		/// Gets the Module ID of the DOM Instance.
		/// </summary>
		public String ModuleId
		{
			get
			{
				return domInstance.DomDefinitionId.ModuleId;
			}
		}

		/// <summary>
		/// Gets the ID of the DOM Instance.
		/// </summary>
		public DomInstanceId ID
		{
			get
			{
				return domInstance.ID;
			}
		}

		/// <summary>
		/// Gets the name of the DOM Instance.
		/// </summary>
		public String Name
		{
			get
			{
				return domInstance.Name;
			}
		}

		/// <summary>
		/// Gets the Status ID of the DOM Instance.
		/// </summary>
		public String StatusId
		{
			get
			{
				return domInstance.StatusId;
			}
		}

		/// <summary>
		/// Gets the underlying DOM Instance.
		/// </summary>
		public DomDefinitionId DomDefinitionId
		{
			get
			{
				return domInstance.DomDefinitionId;
			}
		}

		protected DomInstance domInstance { get; set; }

		/// <summary>
		/// Gets the datetime when the DOM Instance was created in UTC.
		/// </summary>
		public DateTime? CreatedAt
		{
			get
			{
				var createdAt = ((ITrackCreatedAt)domInstance).CreatedAt;
				if (createdAt == null)
					return null;
				else
					return createdAt.ToUniversalTime();
			}
		}

		/// <summary>
		/// Gets the user that created the DOM Instance.
		/// </summary>
		public string CreatedBy
		{
			get
			{
				return ((ITrackCreatedBy)domInstance).CreatedBy;
			}
		}

		/// <summary>
		/// Gets the datetime when the DOM Instance was last modified in UTC.
		/// </summary>
		public DateTime? LastModified
		{
			get
			{
				var lastModified = ((ITrackLastModified)domInstance).LastModified;
				if (lastModified == null)
					return null;
				else
					return lastModified.ToUniversalTime();
			}
		}

		/// <summary>
		/// Gets the user that last modified the DOM Instance.
		/// </summary>
		public string LastModifiedBy
		{
			get
			{
				return ((ITrackLastModifiedBy)domInstance).LastModifiedBy;
			}
		}

		public static implicit operator DomInstance(DomInstanceBase instance)
		{
			return instance.ToInstance();
		}

		public static bool operator ==(DomInstanceBase left, DomInstanceBase right)
		{
			if (left is null)
			{
				return right is null;
			}

			return left.Equals(right);
		}

		public static bool operator !=(DomInstanceBase left, DomInstanceBase right)
		{
			return !(left == right);
		}

		/// <summary>
		/// Deletes this DOM Instance from the database.
		/// </summary>
		/// <param name="messageHandler">The connection to the DataMiner system.</param>
		public void Delete(Func<DMSMessage[], DMSMessage[]> messageHandler)
		{
			Delete(new DomHelper(messageHandler, ModuleId));
		}

		/// <summary>
		/// Deletes this DOM Instance from the database.
		/// </summary>
		/// <param name="helper">The connection to the DataMiner system.</param>
		public void Delete(DomHelper helper)
		{
			helper.DomInstances.Delete(domInstance);
		}

		/// <summary>
		/// Saves this DOM Instance to the database.
		/// </summary>
		/// <param name="messageHandler">The connection to the DataMiner system.</param>
		public void Save(Func<DMSMessage[], DMSMessage[]> messageHandler)
		{
			Save(new DomHelper(messageHandler, ModuleId));
		}

		/// <summary>
		/// Saves this DOM Instance to the database.
		/// </summary>
		/// <param name="helper">The connection to the DataMiner system.</param>
		public abstract void Save(DomHelper helper);
		/// <summary>
		/// Return the DOM Instance object with all the fields filled in according to this object.
		/// </summary>
		public DomInstance ToInstance()
		{
			BeforeToInstance();
			var instance = InternalToInstance();
			AfterToInstance();
			return instance;
		}

		/// <summary>
		/// Optional method that runs before the internal ToInstance method runs.
		/// </summary>
		protected virtual void BeforeToInstance()
		{
		}

		/// <summary>
		/// Return the DOM Instance object with all the fields filled in according to this object.
		/// </summary>
		protected abstract DomInstance InternalToInstance();
		/// <summary>
		/// Optional method that runs after the internal ToInstance method runs.
		/// </summary>
		protected virtual void AfterToInstance()
		{
		}

		protected abstract void InitializeProperties();
		/// <summary>
		/// Optional method that runs after the object is constructed and the initialize has ran.
		/// </summary>
		protected virtual void AfterLoad()
		{
		}

		public override int GetHashCode()
		{
			return this.ID.GetHashCode();
		}

		public override bool Equals(object obj)
		{
			return Equals(obj as DomInstanceBase);
		}

		public bool Equals(DomInstanceBase other)
		{
			if (other is null)
			{
				return false;
			}

			if (ReferenceEquals(this, other))
			{
				return true;
			}

			return this.ID.Equals(other.ID);
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
	using System;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Sections;

	public abstract class DomSectionBase : IEquatable<DomSectionBase>
	{
		protected Section section;
		protected DomSectionBase(SectionDefinitionID id)
		{
			if (id == null)
				throw new ArgumentNullException("id");
			this.section = new Section(id);
			AfterLoad();
		}

		protected DomSectionBase(SectionDefinition definition)
		{
			if (definition == null)
				throw new ArgumentNullException("definition");
			this.section = new Section(definition);
			AfterLoad();
		}

		protected DomSectionBase(Section section, SectionDefinitionID id)
		{
			if (section == null)
				throw new ArgumentNullException("section");
			if (section.SectionDefinitionID == null)
			{
				throw new ArgumentException("The given section doesn't have a valid SectionDefinitionId.", nameof(section));
			}

			if (!section.SectionDefinitionID.Equals(id))
			{
				throw new ArgumentException($"The given section, is not of type '{nameof(id)}'", nameof(section));
			}

			this.section = section;
			AfterLoad();
		}

		/// <summary>
		/// Gets the section's ID.
		/// </summary>
		public SectionID ID
		{
			get
			{
				return section.ID;
			}
		}

		/// <summary>
		/// Gets the section's Section Definition ID.
		/// </summary>
		public SectionDefinitionID SectionDefinitionID
		{
			get
			{
				return section.SectionDefinitionID;
			}
		}

		/// <summary>
		/// Gets a value indicating whether the section is empty.
		/// </summary>
		/// <value>
		/// <see langword="true"/> if the section doesn't contains any field values, otherwise, <see langword="false"/>.
		/// </value>
		public bool IsEmpty
		{
			get
			{
				return !section.FieldValues.Any();
			}
		}

		public static implicit operator SectionDefinitionID(DomSectionBase sectionBase)
		{
			return sectionBase.section.SectionDefinitionID;
		}

		public static implicit operator SectionDefinition(DomSectionBase sectionBase)
		{
			return sectionBase.section.GetSectionDefinition();
		}

		public static bool operator ==(DomSectionBase left, DomSectionBase right)
		{
			if (left is null)
			{
				return right is null;
			}

			return left.Equals(right);
		}

		public static bool operator !=(DomSectionBase left, DomSectionBase right)
		{
			return !(left == right);
		}

		public override string ToString()
		{
			return $"{this.section.SectionDefinitionID}";
		}

		/// <summary>
		/// Optional method that runs at the end of the constructor.
		/// </summary>
		protected virtual void AfterLoad()
		{
		}

		public virtual Section ToSection()
		{
			BeforeToSection();
			var section = InternalToSection();
			AfterToSection();
			return section;
		}

		/// <summary>
		/// Optional method that runs before the internal ToSection method runs.
		/// </summary>
		protected virtual void BeforeToSection()
		{
		}

		protected virtual Section InternalToSection()
		{
			return this.section;
		}

		/// <summary>
		/// Optional method that runs after the internal ToSection method runs.
		/// </summary>
		protected virtual void AfterToSection()
		{
		}

		public override int GetHashCode()
		{
			return this.ID.GetHashCode();
		}

		public override bool Equals(object obj)
		{
			return Equals(obj as DomSectionBase);
		}

		public bool Equals(DomSectionBase other)
		{
			if (other is null)
			{
				return false;
			}

			if (ReferenceEquals(this, other))
			{
				return true;
			}

			return this.ID.Equals(other.ID);
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcRelationships
{
	using System;
	using System.ComponentModel;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Sections;

	public static class SlcRelationshipsIds
	{
		public const string ModuleId = "(slc)relationships";
		public static class Enums
		{
		}

		public static class Sections
		{
			public static class LinkInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("f903f60d-bfdf-4316-b138-22b5a1c9c890"))
				{ ModuleId = "(slc)relationships" };
				public static FieldDescriptorID ChildObjectType { get; } = new FieldDescriptorID(new Guid("e359e9c1-82a2-400c-9957-c963e4c040f5"));
				public static FieldDescriptorID ChildObjectID { get; } = new FieldDescriptorID(new Guid("f4d694f6-4e7a-4ef6-a3d8-10ddc4ace5ed"));
				public static FieldDescriptorID ChildObjectName { get; } = new FieldDescriptorID(new Guid("b00c48f4-221c-4ab8-acea-63d5399d9ace"));
				public static FieldDescriptorID ChildURL { get; } = new FieldDescriptorID(new Guid("cfc72fba-0ced-40c3-ba38-41319db01c59"));
				public static FieldDescriptorID ChildOrder { get; } = new FieldDescriptorID(new Guid("58fdbd84-8a6a-4ea2-97d0-d78fd01ad34f"));
				public static FieldDescriptorID ParentObjectType { get; } = new FieldDescriptorID(new Guid("51a442a4-e77d-417e-80e3-4e343008e540"));
				public static FieldDescriptorID ParentObjectID { get; } = new FieldDescriptorID(new Guid("43429e53-9f24-4a35-955d-8f15ba7781c8"));
				public static FieldDescriptorID ParentObjectName { get; } = new FieldDescriptorID(new Guid("a528ed39-f0e5-452c-a5f8-d97c12b995e3"));
				public static FieldDescriptorID ParentURL { get; } = new FieldDescriptorID(new Guid("acf0f927-9e61-4ffb-b1f5-41a779a69b51"));
				public static FieldDescriptorID ParentOrder { get; } = new FieldDescriptorID(new Guid("80cf017b-07b0-4215-8b1e-ffecaa4f25d9"));
			}

			public static class ObjectTypeInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("ac97c003-884e-48d7-9ff3-e84b13a349be"))
				{ ModuleId = "(slc)relationships" };
				public static FieldDescriptorID ObjectName { get; } = new FieldDescriptorID(new Guid("fd6b00c0-0f16-4025-8f13-f9b18f9e2fe0"));
			}
		}

		public static class Definitions
		{
			public static DomDefinitionId ObjectTypes { get; } = new DomDefinitionId(new Guid("7ab57219-6b21-4abb-83a4-f5c22de38f20"))
			{ ModuleId = "(slc)relationships" };
			public static DomDefinitionId Links { get; } = new DomDefinitionId(new Guid("fcedb769-e515-414b-8e64-7093104f6d66"))
			{ ModuleId = "(slc)relationships" };
		}

		public static class Behaviors
		{
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcRelationships
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Messages;

	/// <summary>
	/// Represents a wrapper class for accessing a ObjectTypesInstance DOM instance.
	/// The <see cref="ObjectTypesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ObjectTypesInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ObjectTypesInstance"/> class. Creates an empty <see cref="ObjectTypesInstance"/> instance with default settings.
		/// </summary>
		public ObjectTypesInstance() : base(SlcRelationshipsIds.Definitions.ObjectTypes)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ObjectTypesInstance"/> class. Creates an empty <see cref="ObjectTypesInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public ObjectTypesInstance(Guid id) : base(SlcRelationshipsIds.Definitions.ObjectTypes, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ObjectTypesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ObjectTypesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ObjectTypesInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcRelationshipsIds.Definitions.ObjectTypes))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcRelationshipsIds.Definitions.ObjectTypes)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the ObjectTypeInfo section of the DOM Instance.
		/// </summary>
		public ObjectTypeInfoSection ObjectTypeInfo { get; set; }

		public static explicit operator ObjectTypesInstance(DomInstance instance)
		{
			return new ObjectTypesInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			domInstance.Sections.Add(ObjectTypeInfo.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _objectTypeInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcRelationshipsIds.Sections.ObjectTypeInfo.Id));
			if (_objectTypeInfo is null)
			{
				ObjectTypeInfo = new ObjectTypeInfoSection();
			}
			else
			{
				ObjectTypeInfo = new ObjectTypeInfoSection(_objectTypeInfo);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a LinksInstance DOM instance.
	/// The <see cref="LinksInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class LinksInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="LinksInstance"/> class. Creates an empty <see cref="LinksInstance"/> instance with default settings.
		/// </summary>
		public LinksInstance() : base(SlcRelationshipsIds.Definitions.Links)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="LinksInstance"/> class. Creates an empty <see cref="LinksInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public LinksInstance(Guid id) : base(SlcRelationshipsIds.Definitions.Links, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="LinksInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="LinksInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public LinksInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcRelationshipsIds.Definitions.Links))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcRelationshipsIds.Definitions.Links)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the LinkInfo section of the DOM Instance.
		/// </summary>
		public LinkInfoSection LinkInfo { get; set; }

		public static explicit operator LinksInstance(DomInstance instance)
		{
			return new LinksInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			domInstance.Sections.Add(LinkInfo.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _linkInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcRelationshipsIds.Sections.LinkInfo.Id));
			if (_linkInfo is null)
			{
				LinkInfo = new LinkInfoSection();
			}
			else
			{
				LinkInfo = new LinkInfoSection(_linkInfo);
			}
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcRelationships
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Apps.Sections.Sections;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Sections;

	/// <summary>
	/// Represents a wrapper class for accessing a LinkInfoSection section.
	/// The <see cref="LinkInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class LinkInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="LinkInfoSection"/> class. Creates an empty <see cref="LinkInfoSection"/> object with default settings.
		/// </summary>
		public LinkInfoSection() : base(SlcRelationshipsIds.Sections.LinkInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="LinkInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="LinkInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public LinkInfoSection(Section section) : base(section, SlcRelationshipsIds.Sections.LinkInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ChildObjectType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? ChildObjectType
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ChildObjectID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ChildObjectID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectID);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ChildObjectName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ChildObjectName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectName);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ChildURL field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ChildURL
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ChildURL);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildURL);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildURL, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ChildOrder field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? ChildOrder
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcRelationshipsIds.Sections.LinkInfo.ChildOrder);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ChildOrder);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ChildOrder, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ParentObjectType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? ParentObjectType
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ParentObjectID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ParentObjectID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectID);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ParentObjectName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ParentObjectName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectName);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ParentURL field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ParentURL
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.LinkInfo.ParentURL);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentURL);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentURL, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ParentOrder field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? ParentOrder
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcRelationshipsIds.Sections.LinkInfo.ParentOrder);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.LinkInfo.ParentOrder);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.LinkInfo.ParentOrder, (Int64)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ChildObjectType) == null)
				throw new InvalidOperationException("'ChildObjectType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<Guid>(SlcRelationshipsIds.Sections.LinkInfo.ParentObjectType) == null)
				throw new InvalidOperationException("'ParentObjectType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a ObjectTypeInfoSection section.
	/// The <see cref="ObjectTypeInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ObjectTypeInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ObjectTypeInfoSection"/> class. Creates an empty <see cref="ObjectTypeInfoSection"/> object with default settings.
		/// </summary>
		public ObjectTypeInfoSection() : base(SlcRelationshipsIds.Sections.ObjectTypeInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ObjectTypeInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ObjectTypeInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ObjectTypeInfoSection(Section section) : base(section, SlcRelationshipsIds.Sections.ObjectTypeInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ObjectName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ObjectName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName);
				}
				else
				{
					section.AddOrUpdateValue(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName, (String)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<String>(SlcRelationshipsIds.Sections.ObjectTypeInfo.ObjectName) == null)
				throw new InvalidOperationException("'ObjectName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcWorkflow
{
	using System;
	using System.ComponentModel;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Sections;

	public static class SlcWorkflowIds
	{
		public const string ModuleId = "(slc)workflow";
		public static class Enums
		{
			public static class Qtytype
			{
				public const string Min = "min";
				public const string Hour = "hour";
				public const string Day = "day";
				public const string PerUse = "use";
				public static string ToValue(QtytypeEnum @enum)
				{
					switch (@enum)
					{
						case QtytypeEnum.Min:
							return Min;
						case QtytypeEnum.Hour:
							return Hour;
						case QtytypeEnum.Day:
							return Day;
						case QtytypeEnum.PerUse:
							return PerUse;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static QtytypeEnum ToEnum(string s)
				{
					switch (s)
					{
						case Min:
							return QtytypeEnum.Min;
						case Hour:
							return QtytypeEnum.Hour;
						case Day:
							return QtytypeEnum.Day;
						case PerUse:
							return QtytypeEnum.PerUse;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum QtytypeEnum
			{
				Min,
				Hour,
				Day,
				PerUse
			}

			public enum Bookingaction
			{
				AllOrNothing = 0,
				BestEffort = 1
			}

			public enum Deleteaction
			{
				SingleNode = 0,
				AllNodes = 1
			}

			public enum Jobstate
			{
				Draft = 0,
				Tentative = 1,
				Confirmed = 2,
				Running = 3,
				Completed = 4,
				ReadyForInvoice = 5,
				Canceled = 6,
				Invoiced = 7
			}

			public enum Nodetype
			{
				Source = 0,
				SourceType = 1,
				Resource = 2,
				ResourcePool = 3,
				Destination = 4,
				DestinationType = 5,
				SourceInstance = 6,
				DestinationInstance = 7
			}

			public enum Resourceselectmode
			{
				Manual = 0,
				AutoSelectAtBooking = 1,
				AutoSelectAtRuntime = 2
			}

			public enum Resourceselectstate
			{
				Selected = 0,
				PendingAutoSelection = 1,
				PendingManualSelection = 2,
				RequestedResource = 3,
				Error = 4
			}

			public enum Nodeconfigurationstatus
			{
				NoValuesNeeded = 0,
				MandatoryValuesMissing = 1,
				NonMandatoryValuesMissing = 2,
				AllValuesProvided = 3
			}

			public enum Atjobstart
			{
				CreateServiceImmediately = 0,
				CreateServiceAtWorkflowStart = 1,
				DonTCreateService = 2
			}

			public enum Atjobend
			{
				DeleteServiceIfOneExists = 0,
				DonTDeleteService = 1
			}

			public enum Filtertype
			{
				Capability = 0,
				Capacity = 1,
				Domain = 2
			}

			public enum Replaceaction
			{
				SingleNode = 0,
				AllNodes = 1
			}

			public enum Connectiontype
			{
				LevelBased = 0,
				TagBased = 1
			}

			public enum Connectionsubtype
			{
				All = 0,
				PredefinedSubset = 1,
				CustomSubset = 2,
				Shuffle = 3
			}

			public enum Predefinedsubset
			{
				VAD = 0,
				V = 1,
				A = 2,
				D = 3,
				VA = 4,
				VD = 5,
				AD = 6
			}

			public enum Jobpriority
			{
				High = 0,
				Normal = 1,
				Low = 2
			}

			public static class Lineitemtype
			{
				public const string Costing = "costing";
				public const string Billing = "billing";
				public static string ToValue(LineitemtypeEnum @enum)
				{
					switch (@enum)
					{
						case LineitemtypeEnum.Costing:
							return Costing;
						case LineitemtypeEnum.Billing:
							return Billing;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static LineitemtypeEnum ToEnum(string s)
				{
					switch (s)
					{
						case Costing:
							return LineitemtypeEnum.Costing;
						case Billing:
							return LineitemtypeEnum.Billing;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum LineitemtypeEnum
			{
				Costing,
				Billing
			}

			public static class Objecttype
			{
				public const string Node = "node";
				public const string Workflow = "workflow";
				public static string ToValue(ObjecttypeEnum @enum)
				{
					switch (@enum)
					{
						case ObjecttypeEnum.Node:
							return Node;
						case ObjecttypeEnum.Workflow:
							return Workflow;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static ObjecttypeEnum ToEnum(string s)
				{
					switch (s)
					{
						case Node:
							return ObjecttypeEnum.Node;
						case Workflow:
							return ObjecttypeEnum.Workflow;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum ObjecttypeEnum
			{
				Node,
				Workflow
			}

			public enum Jobconfigurationstatus
			{
				NoValuesNeeded = 0,
				MandatoryValuesMissing = 1,
				NonMandatoryValuesMissing = 2,
				AllValuesProvided = 3
			}

			public enum Processstatus
			{
				NA = 0,
				UpdatingSeries = 1,
				SeriesUpdated = 2,
				UpdateFailed = 3
			}

			public enum Desiredjobstatus
			{
				Draft = 0,
				Tentative = 1
			}

			public enum Priority
			{
				High = 1,
				Normal = 2,
				Low = 3
			}
		}

		public static class Sections
		{
			public static class Errors
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("fd2df49f-05a5-4bc8-9072-2e19dd88d145"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID ErrorCode { get; } = new FieldDescriptorID(new Guid("1155114c-b19e-4c26-a3e4-ffba40630388"));
				public static FieldDescriptorID ErrorMessage { get; } = new FieldDescriptorID(new Guid("8821968b-14ba-4aa3-a85f-f0660012a943"));
			}

			public static class Rate
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("b41107d1-0e7f-4089-8162-990d47377d4c"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID Qty { get; } = new FieldDescriptorID(new Guid("8445ad52-138c-4edf-873f-0d2a3d92ac15"));
				public static FieldDescriptorID QtyType { get; } = new FieldDescriptorID(new Guid("b5e7fb30-24c7-42a8-85d5-b6058932ab67"));
				public static FieldDescriptorID AmountPerUnit { get; } = new FieldDescriptorID(new Guid("81bb7ed4-069f-4947-8da3-622dcffa9dac"));
				public static FieldDescriptorID TotalAmount { get; } = new FieldDescriptorID(new Guid("54c2a8c3-b6ac-45f1-ace0-d2263585659e"));
				public static FieldDescriptorID TotalNetAmount { get; } = new FieldDescriptorID(new Guid("2282e9f8-0461-4a79-a62d-901c93714183"));
			}

			public static class JobNodeRelationshipGeneralActions
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("bd8f007f-fc61-47e5-83f8-0e708217db29"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID BookingAction { get; } = new FieldDescriptorID(new Guid("059c2b6a-0739-4db1-ade4-bf9ad2d0a9e9"));
				public static FieldDescriptorID DeleteAction { get; } = new FieldDescriptorID(new Guid("c09c90cc-725f-42d5-8a09-4a9a15cbeaa0"));
			}

			public static class JobLiteMetadata
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("7467b898-571c-4dfd-b5e9-cf444480a12f"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID FullJobID { get; } = new FieldDescriptorID(new Guid("54743d37-4acf-485f-ba21-c3d85a2db2eb"));
				public static FieldDescriptorID JobState { get; } = new FieldDescriptorID(new Guid("c17dc61c-5f6c-403a-afd2-7b33c0e5b7ec"));
				public static FieldDescriptorID LinkedResourcesMetadata { get; } = new FieldDescriptorID(new Guid("4f16400c-560f-43b2-9e01-3484156f4d0c"));
				public static FieldDescriptorID JobDuration { get; } = new FieldDescriptorID(new Guid("0711ae78-8cd2-463b-908d-6ab6a5a839e1"));
			}

			public static class SessionDataStore
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("3c203118-c2ae-42ad-9f95-808fd988dabb"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID JobId { get; } = new FieldDescriptorID(new Guid("f3b60386-20cd-41da-953a-4a8ace65ad43"));
			}

			public static class JobSettings
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("19f2d7c6-ed16-4e05-bd02-78016a4c8a9d"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID JobIDPrefix { get; } = new FieldDescriptorID(new Guid("800227f3-e4c7-48ea-b3ec-98b2a40f8982"));
				public static FieldDescriptorID JobIDMinimumDigits { get; } = new FieldDescriptorID(new Guid("b8ee8619-f64e-4c71-8c36-3a0692b6456e"));
				public static FieldDescriptorID JobIDStartingSeed { get; } = new FieldDescriptorID(new Guid("9778566b-422f-4908-a05f-e56a93037779"));
				public static FieldDescriptorID JobIDIncrement { get; } = new FieldDescriptorID(new Guid("1a55336d-d207-48ed-9c56-3d43219f8f7b"));
				public static FieldDescriptorID JobIDNextSequence { get; } = new FieldDescriptorID(new Guid("3e07caec-bb58-4870-997c-42f0bcd7bc63"));
				public static FieldDescriptorID DefaultPreroll { get; } = new FieldDescriptorID(new Guid("e9d15d74-a962-45e2-9698-2df0092068af"));
				public static FieldDescriptorID DefaultPostroll { get; } = new FieldDescriptorID(new Guid("081457ee-2c47-4296-8852-492fbd8548c9"));
			}

			public static class Nodes
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("717f9a98-a705-4740-86ec-05204ef6dd28"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID NodeID { get; } = new FieldDescriptorID(new Guid("ef8bb4aa-095e-47e0-9d88-b994b5309a18"));
				public static FieldDescriptorID NodeAlias { get; } = new FieldDescriptorID(new Guid("a330c5a1-df84-4044-94eb-f1d6b96bdac0"));
				public static FieldDescriptorID NodeType { get; } = new FieldDescriptorID(new Guid("abb6aadf-b315-4722-bc0e-859f6c3feae2"));
				public static FieldDescriptorID NodeReferenceID { get; } = new FieldDescriptorID(new Guid("fbbd7129-e818-4c73-9cc2-e6db158bf89f"));
				public static FieldDescriptorID NodeParentReferenceID { get; } = new FieldDescriptorID(new Guid("17d00bc5-e562-4221-8aba-fd3c4be7d31d"));
				public static FieldDescriptorID NodeIcon { get; } = new FieldDescriptorID(new Guid("3d3656ab-a46f-49f8-a584-7a5d7ecb33f4"));
				public static FieldDescriptorID AutomaticConfiguration { get; } = new FieldDescriptorID(new Guid("bb98266a-ab15-4694-9320-6f0d315f1d2c"));
				public static FieldDescriptorID ConfigurationParameters { get; } = new FieldDescriptorID(new Guid("b54826a6-81ba-45f9-a899-40ddaba83024"));
				public static FieldDescriptorID AdHocControlScript { get; } = new FieldDescriptorID(new Guid("99d2b240-e4d6-4623-a040-8dd4a21688e4"));
				public static FieldDescriptorID NodeConfigurationExecutionOrder { get; } = new FieldDescriptorID(new Guid("e3805313-fc3a-4321-be34-a7d573d5ca9c"));
				public static FieldDescriptorID ReserveNode { get; } = new FieldDescriptorID(new Guid("f3c111f3-33fc-45a6-a4f2-8140b1c1e3ad"));
				public static FieldDescriptorID Hidden { get; } = new FieldDescriptorID(new Guid("372f67c9-30c8-4370-9a65-3d115c2d6d5c"));
				public static FieldDescriptorID NodeStartTime { get; } = new FieldDescriptorID(new Guid("d932725e-a6f4-4707-bce5-5c749d8ccba7"));
				public static FieldDescriptorID NodeEndTime { get; } = new FieldDescriptorID(new Guid("d3c4926c-83a7-4ce7-9f4f-e8c4f4de9482"));
				public static FieldDescriptorID LinkedBookingIds { get; } = new FieldDescriptorID(new Guid("35167132-87db-4a8b-afd8-5bc120c1180a"));
				public static FieldDescriptorID ResourceSelectMode { get; } = new FieldDescriptorID(new Guid("52109652-da0c-4a34-935a-fbeacea21c0b"));
				public static FieldDescriptorID ResourceSelectState { get; } = new FieldDescriptorID(new Guid("c2525fb4-28eb-4816-b2e3-30556f5d4d3b"));
				public static FieldDescriptorID Billable { get; } = new FieldDescriptorID(new Guid("c5418bb2-8c9b-4bdf-8955-ff1be21df3e7"));
				public static FieldDescriptorID NodeConfiguration { get; } = new FieldDescriptorID(new Guid("7c13f5af-6a13-43bc-99f2-49c14d160397"));
				public static FieldDescriptorID NodeConfigurationStatus { get; } = new FieldDescriptorID(new Guid("3e268011-9ec3-465b-af62-2a4916f3e1f7"));
			}

			public static class CostingAndBilling
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("bce8a3ba-4f5d-4a8b-840f-dfb5940b8d4c"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID Organization { get; } = new FieldDescriptorID(new Guid("b4280765-96fe-400a-99a9-e430e9b3d99a"));
				public static FieldDescriptorID JobOwner { get; } = new FieldDescriptorID(new Guid("818f79f7-7df3-4ae4-b39e-4fa90b732cf4"));
				public static FieldDescriptorID AdditionalContacts { get; } = new FieldDescriptorID(new Guid("b081fecc-518c-4e29-be4b-c3b3fba6509c"));
				public static FieldDescriptorID Contract { get; } = new FieldDescriptorID(new Guid("d183ca7d-b735-4508-8dcb-1522a2134ea1"));
				public static FieldDescriptorID JobStatus { get; } = new FieldDescriptorID(new Guid("d249324d-5ab5-4253-9490-7c9bf7d0da0a"));
				public static FieldDescriptorID ContractUplift { get; } = new FieldDescriptorID(new Guid("9b2e77b8-7c27-4c06-b522-b2080f32a215"));
				public static FieldDescriptorID ContractDiscount { get; } = new FieldDescriptorID(new Guid("365a821e-a837-486b-a6e9-7bd0485b3f60"));
				public static FieldDescriptorID SpeedOrderIncrementOnTopOfBillingPrice { get; } = new FieldDescriptorID(new Guid("0c6dc91c-2771-443d-9c56-eeeecb267beb"));
				public static FieldDescriptorID SpeedOrderFixedFee { get; } = new FieldDescriptorID(new Guid("8b40e49f-8ba1-47f2-b549-d33517139627"));
				public static FieldDescriptorID CancellationOfBillingPrice { get; } = new FieldDescriptorID(new Guid("3b175dae-ec7a-47db-85b5-1d07940de9b3"));
				public static FieldDescriptorID CancellationFixedFee { get; } = new FieldDescriptorID(new Guid("ce2921ab-3744-4733-b3fa-c25e2ddda82d"));
				public static FieldDescriptorID LastBillCalculation { get; } = new FieldDescriptorID(new Guid("f721e551-5139-479f-9ed7-717c3313384f"));
				public static FieldDescriptorID TotalBillNetAmount { get; } = new FieldDescriptorID(new Guid("27624e6a-faee-4416-aaf4-c8440ef8f956"));
				public static FieldDescriptorID TotalBillNetOverrideAmount { get; } = new FieldDescriptorID(new Guid("5d24ed13-5be4-4d41-9d43-f33573e9f645"));
				public static FieldDescriptorID BillCurrency { get; } = new FieldDescriptorID(new Guid("47f0e303-d85e-4cd3-8d3b-896245e49ec8"));
			}

			public static class MonitoringSettings
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("74d2d947-36be-41f0-babd-9a5b986d928b"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID AtJobStart { get; } = new FieldDescriptorID(new Guid("b9a62e46-492a-4eba-a1ce-5218ce306989"));
				public static FieldDescriptorID AtJobEnd { get; } = new FieldDescriptorID(new Guid("aa1d9ed8-33f4-437a-9a7b-0d993d5ebb22"));
				public static FieldDescriptorID MonitoringServiceTemplate { get; } = new FieldDescriptorID(new Guid("234e3e79-b84a-4a74-8751-0ca1f14a9dbd"));
				public static FieldDescriptorID MonitoringServiceID { get; } = new FieldDescriptorID(new Guid("e67d43c5-5efc-4254-b837-049d45cb548e"));
			}

			public static class SessionFilter
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("17b3fc7e-089d-4855-b7fe-07df846fa933"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID FilterType { get; } = new FieldDescriptorID(new Guid("acb54b31-a34c-4861-980e-5ef6d6094df8"));
				public static FieldDescriptorID FilterKey { get; } = new FieldDescriptorID(new Guid("c77a5add-1607-484b-941c-c53531a87d27"));
				public static FieldDescriptorID FilterValues { get; } = new FieldDescriptorID(new Guid("e9fed5ae-2702-42f2-962b-48bb5280b4df"));
			}

			public static class JobNodeRelationshipReplaceActions
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("76908a6e-09bc-490a-ba34-2e7e23acd450"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID ReplaceAction { get; } = new FieldDescriptorID(new Guid("f6f3ab33-99c7-4d8f-81ce-f59c2e713f34"));
				public static FieldDescriptorID ExecutePoolLinks { get; } = new FieldDescriptorID(new Guid("1bbee8e3-6eed-45ae-90a6-c7685df3c7dc"));
				public static FieldDescriptorID ExecuteBookingExtensionScript { get; } = new FieldDescriptorID(new Guid("c4d0bafa-3001-4d43-a18d-8e8d9f1a6019"));
			}

			public static class Connections
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("8e46264a-8100-49a1-bcef-076490b25da1"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID ConnectionID { get; } = new FieldDescriptorID(new Guid("8ce0d61a-1976-4fea-9d9f-450649b209b0"));
				public static FieldDescriptorID SourceNodeID { get; } = new FieldDescriptorID(new Guid("2b6d7fc8-c8c4-4667-b4e9-c5f1dfb63e1c"));
				public static FieldDescriptorID DestinationNodeID { get; } = new FieldDescriptorID(new Guid("920b7393-c581-421b-8d51-9915d3c294bd"));
				public static FieldDescriptorID ConnectionAlias { get; } = new FieldDescriptorID(new Guid("f043e11d-eef7-4abf-bf03-e50c43d0864b"));
				public static FieldDescriptorID ConnectionExecutionOrder { get; } = new FieldDescriptorID(new Guid("45abe861-4984-4954-a87d-17c49214370b"));
				public static FieldDescriptorID ConnectionType { get; } = new FieldDescriptorID(new Guid("78177b0b-b65b-4327-83bb-da85488b8aa0"));
				public static FieldDescriptorID ConnectionSubtype { get; } = new FieldDescriptorID(new Guid("341234dd-7e0c-4df7-ade5-92f075581acb"));
				public static FieldDescriptorID PredefinedSubset { get; } = new FieldDescriptorID(new Guid("30e61037-d74a-4c3d-8795-aec859117fba"));
				public static FieldDescriptorID ConnectionDetails { get; } = new FieldDescriptorID(new Guid("a1e15aae-7540-4d1c-9d22-c5a3c7861e28"));
				public static FieldDescriptorID ConnectionExecutionScript { get; } = new FieldDescriptorID(new Guid("9e0cee09-3a32-42f2-be30-cf52df76f833"));
			}

			public static class JobInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("dd1d3774-c681-47d3-950a-3783e3533bf9"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID JobID { get; } = new FieldDescriptorID(new Guid("a717a4c3-c374-4b24-8f33-feee73208955"));
				public static FieldDescriptorID JobName { get; } = new FieldDescriptorID(new Guid("d9084944-9dcc-43c1-8783-2e22626feb9e"));
				public static FieldDescriptorID JobDescription { get; } = new FieldDescriptorID(new Guid("2fc4d087-2776-48d6-a990-373ab4b05c1b"));
				public static FieldDescriptorID Workflow { get; } = new FieldDescriptorID(new Guid("9d608393-c7f2-4f45-9857-8b18c5f42a47"));
				public static FieldDescriptorID JobStart { get; } = new FieldDescriptorID(new Guid("eabadf08-89e9-499a-b119-07d76c544a90"));
				public static FieldDescriptorID JobEnd { get; } = new FieldDescriptorID(new Guid("0d978e1c-dbba-4592-a9b2-32ed65fc7603"));
				public static FieldDescriptorID ApproxOutDuration { get; } = new FieldDescriptorID(new Guid("79a7943e-5adf-44fa-9984-9f16622ebbb3"));
				public static FieldDescriptorID ApproxOutTime { get; } = new FieldDescriptorID(new Guid("ea1f069f-7fe7-4ce2-91d3-aca94051f74b"));
				public static FieldDescriptorID JobPriority { get; } = new FieldDescriptorID(new Guid("7775cd7c-0b56-4878-ad35-a7757d436a32"));
				public static FieldDescriptorID JobSource { get; } = new FieldDescriptorID(new Guid("9cae3907-45ba-4ef7-8c42-559b7c2e6ad3"));
				public static FieldDescriptorID JobNotes { get; } = new FieldDescriptorID(new Guid("cfac4a80-00b7-4531-9a3b-8ec34b84afbf"));
				public static FieldDescriptorID OriginalJobStart { get; } = new FieldDescriptorID(new Guid("fe9e1f6d-7083-4ada-8895-7f0620c10f54"));
				public static FieldDescriptorID OriginalJobEnd { get; } = new FieldDescriptorID(new Guid("7f1cf5f7-4aed-47f5-901d-4f5c2fc991bc"));
				public static FieldDescriptorID JobConfirmation { get; } = new FieldDescriptorID(new Guid("0090948e-4609-4281-ba3c-14945652629b"));
				public static FieldDescriptorID JobCancellation { get; } = new FieldDescriptorID(new Guid("7ec04ba8-a457-4390-b756-3d1afb8e9c71"));
				public static FieldDescriptorID ActionNeeded { get; } = new FieldDescriptorID(new Guid("d9afd738-5c54-4d14-b287-b4ecc663d204"));
				public static FieldDescriptorID LockedBy { get; } = new FieldDescriptorID(new Guid("841be21d-4de0-46d0-8a97-ff57dbfa87a0"));
				public static FieldDescriptorID Preroll { get; } = new FieldDescriptorID(new Guid("0ca0cc12-cb87-46a6-b27b-b87ab0dd2632"));
				public static FieldDescriptorID Postroll { get; } = new FieldDescriptorID(new Guid("07b1ade4-2aa8-48a2-a462-e5f60829f521"));
				public static FieldDescriptorID JobSeriesID { get; } = new FieldDescriptorID(new Guid("e35a308c-c342-4d61-b53e-744ffdeda9b9"));
			}

			public static class CostingAndBillingDetails
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("28a99ebf-efd3-4046-9592-35e448f54e6a"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID LineItemType { get; } = new FieldDescriptorID(new Guid("7552a3e0-edb8-4a84-8a37-16e987116d41"));
				public static FieldDescriptorID ObjectType { get; } = new FieldDescriptorID(new Guid("ccfd1aa0-3574-49d0-ac2d-e29e89697ad1"));
				public static FieldDescriptorID ObjectID { get; } = new FieldDescriptorID(new Guid("d3229cac-d373-4bb7-a501-3b68176e07a9"));
				public static FieldDescriptorID Description { get; } = new FieldDescriptorID(new Guid("ba982271-d1f5-4827-a1f1-7a573961138b"));
				public static FieldDescriptorID RateCard { get; } = new FieldDescriptorID(new Guid("3b33582c-5c57-4a0b-8567-89abe034920f"));
				public static FieldDescriptorID TotalNetOverrideAmount { get; } = new FieldDescriptorID(new Guid("9d1c4c09-5b73-4d34-bd0f-0cf393135d00"));
				public static FieldDescriptorID Currency { get; } = new FieldDescriptorID(new Guid("7deef271-9ccc-4ba9-9fcc-af8ce899dd65"));
				public static FieldDescriptorID Rates { get; } = new FieldDescriptorID(new Guid("f0ce49a3-a023-45e0-9787-0875fab7d3c2"));
			}

			public static class WorkflowExecution
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("f81c94fc-a43d-4f77-9e3d-d9a34dc9cf27"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID WorkflowExecutionScript { get; } = new FieldDescriptorID(new Guid("3b7d81b5-d5a6-47cf-a872-ca4e1259923c"));
				public static FieldDescriptorID WorkflowConfiguration { get; } = new FieldDescriptorID(new Guid("4cd751d1-db58-448d-81d5-0f41b43000dd"));
			}

			public static class ProfileParameterValues
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("86ffc829-5846-4737-b5fd-a2411c8bb884"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID ProfileParameterID { get; } = new FieldDescriptorID(new Guid("2419f53b-ade1-4fce-8029-905cc5b14cea"));
				public static FieldDescriptorID StringValue { get; } = new FieldDescriptorID(new Guid("c7a8923e-2882-4c94-87c7-d44a05cc906a"));
				public static FieldDescriptorID DoubleValue { get; } = new FieldDescriptorID(new Guid("caa80a42-1956-4d97-be3a-b7828267d035"));
				public static FieldDescriptorID ReferenceID { get; } = new FieldDescriptorID(new Guid("60badcf5-0ec0-4b01-83f0-7c78cc7b0867"));
			}

			public static class SessionDataUser
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("45c92fe1-0b64-47dc-b76b-5a9fb5329fb1"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID User { get; } = new FieldDescriptorID(new Guid("5ea43113-88eb-4a05-8046-b9ad27b5f198"));
			}

			public static class JobExecution
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("43a36804-3409-4498-8620-eaec80238fcc"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID JobExecutionScript { get; } = new FieldDescriptorID(new Guid("4a9bf831-b5cd-4cb1-a25b-f1967a2e177c"));
				public static FieldDescriptorID JobConfiguration { get; } = new FieldDescriptorID(new Guid("7f98a626-bce5-4c78-8ced-387f75f27914"));
				public static FieldDescriptorID JobConfigurationStatus { get; } = new FieldDescriptorID(new Guid("21e962f1-6cce-4e73-8088-3ae37a1922c3"));
			}

			public static class NodeRelationships
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("b8ccf030-5d0c-42ac-8a00-06f430bbedf2"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID ParentNodeID { get; } = new FieldDescriptorID(new Guid("b68b3aa5-6449-497c-b2ad-77d31522544f"));
				public static FieldDescriptorID ChildNodeID { get; } = new FieldDescriptorID(new Guid("e8cca1c7-084d-45ca-b10b-1713279aa0c1"));
				public static FieldDescriptorID RelationshipAction { get; } = new FieldDescriptorID(new Guid("99458bad-c9a8-4db5-8ea4-3aad742e9abc"));
			}

			public static class RecurringInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("5d0df0b7-38ee-4297-851c-df6b616bddaa"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID Duration { get; } = new FieldDescriptorID(new Guid("be066907-2644-4ba5-a9c6-78bb1fc69a53"));
				public static FieldDescriptorID TimeZone { get; } = new FieldDescriptorID(new Guid("ad3c9b87-a4ee-475e-a5c5-205079076720"));
				public static FieldDescriptorID RecurringPattern { get; } = new FieldDescriptorID(new Guid("4316ef7b-5463-48e2-9bdc-066186558958"));
				public static FieldDescriptorID ProcessStatus { get; } = new FieldDescriptorID(new Guid("7888de95-5599-4571-9237-ced251d2700b"));
				public static FieldDescriptorID DesiredJobStatus { get; } = new FieldDescriptorID(new Guid("4bf84f0d-09a5-4ac6-b291-92537cea7af3"));
			}

			public static class WorkflowInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("22f75d97-9bf3-4d90-b769-f48c0fce025f"))
				{ ModuleId = "(slc)workflow" };
				public static FieldDescriptorID WorkflowName { get; } = new FieldDescriptorID(new Guid("db431b11-822a-4043-bed3-faaf362f9636"));
				public static FieldDescriptorID WorkflowDescription { get; } = new FieldDescriptorID(new Guid("7004da70-ce94-40aa-b531-7efa3aad577b"));
				public static FieldDescriptorID Favorite { get; } = new FieldDescriptorID(new Guid("3dc1bee6-1cc6-415f-8d96-71020fec578f"));
				public static FieldDescriptorID Priority { get; } = new FieldDescriptorID(new Guid("86f34b26-a731-4251-8bcb-e1990bfbabdd"));
			}
		}

		public static class Definitions
		{
			public static DomDefinitionId AppSettings { get; } = new DomDefinitionId(new Guid("e1ed621e-197d-4003-95f2-5c0722e37c75"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId SessionData { get; } = new DomDefinitionId(new Guid("67e8ba7f-4518-4b7f-ab43-075c2f9c1c87"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId RecurringJobs { get; } = new DomDefinitionId(new Guid("03a014b3-0a74-4abd-aefd-ead1f50c27d3"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId Jobs { get; } = new DomDefinitionId(new Guid("094b7503-2cd8-4e86-a189-c33076cabfbc"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId JobsLite { get; } = new DomDefinitionId(new Guid("89828ce8-7647-440e-81fa-6de9d24019b3"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId Rates { get; } = new DomDefinitionId(new Guid("e811303b-7bd3-48bf-a7e1-ae8aad9247f4"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId JobNodeRelationshipActions { get; } = new DomDefinitionId(new Guid("e4bd1568-1bac-4e72-913c-a175e2267c91"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId Workflows { get; } = new DomDefinitionId(new Guid("aec69c0d-8f7c-44a7-aa21-6aa741ea6135"))
			{ ModuleId = "(slc)workflow" };
			public static DomDefinitionId Configuration { get; } = new DomDefinitionId(new Guid("b5106b24-851f-4525-9dbc-72b1c0f18b7a"))
			{ ModuleId = "(slc)workflow" };
		}

		public static class Behaviors
		{
			public static class Workflow_Behavior
			{
				public static DomBehaviorDefinitionId Id { get; } = new DomBehaviorDefinitionId(new Guid("6ee464d6-d84b-4d92-9135-ed95a6f69e87"))
				{ ModuleId = "(slc)workflow" };
				public static class Statuses
				{
					public const string Draft = "dca9b656-6e4d-41a8-9f64-c57986fc672d";
					public const string Complete = "04e1ffa7-ff8e-401f-90c4-25f2bded26f5";
					public const string Obsolete = "10e4c6ab-f576-4f7a-b32c-775597dafd49";
					public static string ToValue(StatusesEnum @enum)
					{
						switch (@enum)
						{
							case StatusesEnum.Draft:
								return Draft;
							case StatusesEnum.Complete:
								return Complete;
							case StatusesEnum.Obsolete:
								return Obsolete;
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static StatusesEnum ToEnum(string s)
					{
						switch (s)
						{
							case Draft:
								return StatusesEnum.Draft;
							case Complete:
								return StatusesEnum.Complete;
							case Obsolete:
								return StatusesEnum.Obsolete;
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum StatusesEnum
				{
					Draft,
					Complete,
					Obsolete
				}

				public static class Transitions
				{
					public const string Draft_To_Complete = "draft_to_complete";
					public const string Complete_To_Obsolete = "complete_to_obsolete";
					public static string ToValue(TransitionsEnum @enum)
					{
						switch (@enum)
						{
							case TransitionsEnum.Draft_To_Complete:
								return Draft_To_Complete;
							case TransitionsEnum.Complete_To_Obsolete:
								return Complete_To_Obsolete;
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static TransitionsEnum ToEnum(string s)
					{
						switch (s)
						{
							case Draft_To_Complete:
								return TransitionsEnum.Draft_To_Complete;
							case Complete_To_Obsolete:
								return TransitionsEnum.Complete_To_Obsolete;
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum TransitionsEnum
				{
					Draft_To_Complete,
					Complete_To_Obsolete
				}

				public static class Actions
				{
					public const string _1 = "1";
					public const string _2 = "2";
					public const string EditWorkflowConfig = "edit workflow config";
					public static string ToValue(ActionsEnum @enum)
					{
						switch (@enum)
						{
							case ActionsEnum._1:
								return _1;
							case ActionsEnum._2:
								return _2;
							case ActionsEnum.EditWorkflowConfig:
								return EditWorkflowConfig;
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static ActionsEnum ToEnum(string s)
					{
						switch (s)
						{
							case _1:
								return ActionsEnum._1;
							case _2:
								return ActionsEnum._2;
							case EditWorkflowConfig:
								return ActionsEnum.EditWorkflowConfig;
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum ActionsEnum
				{
					_1,
					_2,
					EditWorkflowConfig
				}
			}

			public static class Recurringjob_Behavior
			{
				public static DomBehaviorDefinitionId Id { get; } = new DomBehaviorDefinitionId(new Guid("7d764b5d-37fc-4b74-b9a3-22183b4162f7"))
				{ ModuleId = "(slc)workflow" };
				public static class Statuses
				{
					public const string Active = "922c0cfc-1bd4-41d3-9025-d0c0a28bce0f";
					public const string Cancelled = "31d3f50e-f824-4c23-986c-d31872a88dc9";
					public const string Completed = "70ab823c-9f6c-49b7-9f77-197bf8b7e7ed";
					public static string ToValue(StatusesEnum @enum)
					{
						switch (@enum)
						{
							case StatusesEnum.Active:
								return Active;
							case StatusesEnum.Cancelled:
								return Cancelled;
							case StatusesEnum.Completed:
								return Completed;
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static StatusesEnum ToEnum(string s)
					{
						switch (s)
						{
							case Active:
								return StatusesEnum.Active;
							case Cancelled:
								return StatusesEnum.Cancelled;
							case Completed:
								return StatusesEnum.Completed;
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum StatusesEnum
				{
					Active,
					Cancelled,
					Completed
				}

				public static class Transitions
				{
					public const string Active_To_Completed = "active_to_completed";
					public const string Active_To_Cancelled = "active_to_cancelled";
					public static string ToValue(TransitionsEnum @enum)
					{
						switch (@enum)
						{
							case TransitionsEnum.Active_To_Completed:
								return Active_To_Completed;
							case TransitionsEnum.Active_To_Cancelled:
								return Active_To_Cancelled;
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static TransitionsEnum ToEnum(string s)
					{
						switch (s)
						{
							case Active_To_Completed:
								return TransitionsEnum.Active_To_Completed;
							case Active_To_Cancelled:
								return TransitionsEnum.Active_To_Cancelled;
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum TransitionsEnum
				{
					Active_To_Completed,
					Active_To_Cancelled
				}

				public static class Actions
				{
					public static string ToValue(ActionsEnum @enum)
					{
						switch (@enum)
						{
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static ActionsEnum ToEnum(string s)
					{
						switch (s)
						{
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum ActionsEnum
				{
				}
			}

			public static class Job_Behavior
			{
				public static DomBehaviorDefinitionId Id { get; } = new DomBehaviorDefinitionId(new Guid("4db4650b-c81b-48df-b48f-d6f47e69a829"))
				{ ModuleId = "(slc)workflow" };
				public static class Statuses
				{
					public const string Draft = "bd1d4175-3e1b-4a52-95a8-e215b76a2dfc";
					public const string Tentative = "a48ce836-a02e-45af-9e1a-f3950550b564";
					public const string Confirmed = "985146f2-38de-4f0d-86a5-8c292a07e562";
					public const string Running = "c2c2f157-63c6-4ee5-b648-c150c450aac4";
					public const string Completed = "d23a5d17-af16-4268-b390-f692e6717f54";
					public const string ReadyForInvoice = "7e58d816-6884-40cf-a4c9-0d2b6852d99a";
					public const string Canceled = "d5021aa6-67b9-420d-952d-cb565fee3562";
					public const string Invoiced = "fb6a95d4-9043-46a7-92d9-56cf855cefc3";
					public static string ToValue(StatusesEnum @enum)
					{
						switch (@enum)
						{
							case StatusesEnum.Draft:
								return Draft;
							case StatusesEnum.Tentative:
								return Tentative;
							case StatusesEnum.Confirmed:
								return Confirmed;
							case StatusesEnum.Running:
								return Running;
							case StatusesEnum.Completed:
								return Completed;
							case StatusesEnum.ReadyForInvoice:
								return ReadyForInvoice;
							case StatusesEnum.Canceled:
								return Canceled;
							case StatusesEnum.Invoiced:
								return Invoiced;
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static StatusesEnum ToEnum(string s)
					{
						switch (s)
						{
							case Draft:
								return StatusesEnum.Draft;
							case Tentative:
								return StatusesEnum.Tentative;
							case Confirmed:
								return StatusesEnum.Confirmed;
							case Running:
								return StatusesEnum.Running;
							case Completed:
								return StatusesEnum.Completed;
							case ReadyForInvoice:
								return StatusesEnum.ReadyForInvoice;
							case Canceled:
								return StatusesEnum.Canceled;
							case Invoiced:
								return StatusesEnum.Invoiced;
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum StatusesEnum
				{
					Draft,
					Tentative,
					Confirmed,
					Running,
					Completed,
					[Description("Ready For Invoice")]
					ReadyForInvoice,
					Canceled,
					Invoiced
				}

				public static class Transitions
				{
					public const string Draft_To_Tentative = "draft_to_tentative";
					public const string Tentative_To_Confirmed = "tentative_to_confirmed";
					public const string Confirmed_To_Running = "confirmed_to_running";
					public const string Running_To_Completed = "running_to_completed";
					public const string Confirmed_To_Canceled = "confirmed_to_canceled";
					public const string Tentative_To_Canceled = "tentative_to_canceled";
					public const string Draft_To_Completed = "draft_to_completed";
					public const string Tentative_To_Completed = "tentative_to_completed";
					public const string Confirmed_To_Tentative = "confirmed_to_tentative";
					public static string ToValue(TransitionsEnum @enum)
					{
						switch (@enum)
						{
							case TransitionsEnum.Draft_To_Tentative:
								return Draft_To_Tentative;
							case TransitionsEnum.Tentative_To_Confirmed:
								return Tentative_To_Confirmed;
							case TransitionsEnum.Confirmed_To_Running:
								return Confirmed_To_Running;
							case TransitionsEnum.Running_To_Completed:
								return Running_To_Completed;
							case TransitionsEnum.Confirmed_To_Canceled:
								return Confirmed_To_Canceled;
							case TransitionsEnum.Tentative_To_Canceled:
								return Tentative_To_Canceled;
							case TransitionsEnum.Draft_To_Completed:
								return Draft_To_Completed;
							case TransitionsEnum.Tentative_To_Completed:
								return Tentative_To_Completed;
							case TransitionsEnum.Confirmed_To_Tentative:
								return Confirmed_To_Tentative;
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static TransitionsEnum ToEnum(string s)
					{
						switch (s)
						{
							case Draft_To_Tentative:
								return TransitionsEnum.Draft_To_Tentative;
							case Tentative_To_Confirmed:
								return TransitionsEnum.Tentative_To_Confirmed;
							case Confirmed_To_Running:
								return TransitionsEnum.Confirmed_To_Running;
							case Running_To_Completed:
								return TransitionsEnum.Running_To_Completed;
							case Confirmed_To_Canceled:
								return TransitionsEnum.Confirmed_To_Canceled;
							case Tentative_To_Canceled:
								return TransitionsEnum.Tentative_To_Canceled;
							case Draft_To_Completed:
								return TransitionsEnum.Draft_To_Completed;
							case Tentative_To_Completed:
								return TransitionsEnum.Tentative_To_Completed;
							case Confirmed_To_Tentative:
								return TransitionsEnum.Confirmed_To_Tentative;
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum TransitionsEnum
				{
					Draft_To_Tentative,
					Tentative_To_Confirmed,
					Confirmed_To_Running,
					Running_To_Completed,
					Confirmed_To_Canceled,
					Tentative_To_Canceled,
					Draft_To_Completed,
					Tentative_To_Completed,
					Confirmed_To_Tentative
				}

				public static class Actions
				{
					public static string ToValue(ActionsEnum @enum)
					{
						switch (@enum)
						{
							default:
								throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
						}
					}

					public static ActionsEnum ToEnum(string s)
					{
						switch (s)
						{
							default:
								throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
						}
					}
				}

				public enum ActionsEnum
				{
				}
			}
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcWorkflow
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Messages;

	/// <summary>
	/// Represents a wrapper class for accessing a AppSettingsInstance DOM instance.
	/// The <see cref="AppSettingsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class AppSettingsInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="AppSettingsInstance"/> class. Creates an empty <see cref="AppSettingsInstance"/> instance with default settings.
		/// </summary>
		public AppSettingsInstance() : base(SlcWorkflowIds.Definitions.AppSettings)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="AppSettingsInstance"/> class. Creates an empty <see cref="AppSettingsInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public AppSettingsInstance(Guid id) : base(SlcWorkflowIds.Definitions.AppSettings, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="AppSettingsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="AppSettingsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public AppSettingsInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.AppSettings))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.AppSettings)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the JobSettings section of the DOM Instance.
		/// </summary>
		public JobSettingsSection JobSettings { get; set; }

		public static explicit operator AppSettingsInstance(DomInstance instance)
		{
			return new AppSettingsInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			domInstance.Sections.Add(JobSettings.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _jobSettings = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobSettings.Id));
			if (_jobSettings is null)
			{
				JobSettings = new JobSettingsSection();
			}
			else
			{
				JobSettings = new JobSettingsSection(_jobSettings);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a SessionDataInstance DOM instance.
	/// The <see cref="SessionDataInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class SessionDataInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="SessionDataInstance"/> class. Creates an empty <see cref="SessionDataInstance"/> instance with default settings.
		/// </summary>
		public SessionDataInstance() : base(SlcWorkflowIds.Definitions.SessionData)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="SessionDataInstance"/> class. Creates an empty <see cref="SessionDataInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public SessionDataInstance(Guid id) : base(SlcWorkflowIds.Definitions.SessionData, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="SessionDataInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="SessionDataInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public SessionDataInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.SessionData))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.SessionData)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the SessionDataStore section of the DOM Instance.
		/// </summary>
		public SessionDataStoreSection SessionDataStore { get; set; }

		/// <summary>
		/// Gets or sets the SessionFilter section of the DOM Instance.
		/// </summary>
		public IList<SessionFilterSection> SessionFilter { get; private set; }

		/// <summary>
		/// Gets or sets the SessionDataUser section of the DOM Instance.
		/// </summary>
		public SessionDataUserSection SessionDataUser { get; set; }

		public static explicit operator SessionDataInstance(DomInstance instance)
		{
			return new SessionDataInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			if (SessionDataStore != null && !SessionDataStore.IsEmpty)
			{
				domInstance.Sections.Add(SessionDataStore.ToSection());
			}

			foreach (var item in SessionFilter)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(SessionDataUser.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _sessionDataStore = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionDataStore.Id));
			if (_sessionDataStore is null)
			{
				SessionDataStore = new SessionDataStoreSection();
			}
			else
			{
				SessionDataStore = new SessionDataStoreSection(_sessionDataStore);
			}

			SessionFilter = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionFilter.Id)).Select(section => new SessionFilterSection(section)).ToList();
			var _sessionDataUser = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.SessionDataUser.Id));
			if (_sessionDataUser is null)
			{
				SessionDataUser = new SessionDataUserSection();
			}
			else
			{
				SessionDataUser = new SessionDataUserSection(_sessionDataUser);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a RecurringJobsInstance DOM instance.
	/// The <see cref="RecurringJobsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class RecurringJobsInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="RecurringJobsInstance"/> class. Creates an empty <see cref="RecurringJobsInstance"/> instance with default settings.
		/// </summary>
		public RecurringJobsInstance() : base(SlcWorkflowIds.Definitions.RecurringJobs)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RecurringJobsInstance"/> class. Creates an empty <see cref="RecurringJobsInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public RecurringJobsInstance(Guid id) : base(SlcWorkflowIds.Definitions.RecurringJobs, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RecurringJobsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="RecurringJobsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public RecurringJobsInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.RecurringJobs))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.RecurringJobs)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets the Status ID of the DOM Instance.
		/// </summary>
		public SlcWorkflowIds.Behaviors.Recurringjob_Behavior.StatusesEnum Status
		{
			get
			{
				return SlcWorkflowIds.Behaviors.Recurringjob_Behavior.Statuses.ToEnum(StatusId);
			}
		}

		/// <summary>
		/// Gets or sets the Errors section of the DOM Instance.
		/// </summary>
		public IList<ErrorsSection> Errors { get; private set; }

		/// <summary>
		/// Gets or sets the Nodes section of the DOM Instance.
		/// </summary>
		public IList<NodesSection> Nodes { get; private set; }

		/// <summary>
		/// Gets or sets the CostingAndBilling section of the DOM Instance.
		/// </summary>
		public CostingAndBillingSection CostingAndBilling { get; set; }

		/// <summary>
		/// Gets or sets the MonitoringSettings section of the DOM Instance.
		/// </summary>
		public MonitoringSettingsSection MonitoringSettings { get; set; }

		/// <summary>
		/// Gets or sets the Connections section of the DOM Instance.
		/// </summary>
		public IList<ConnectionsSection> Connections { get; private set; }

		/// <summary>
		/// Gets or sets the JobInfo section of the DOM Instance.
		/// </summary>
		public JobInfoSection JobInfo { get; set; }

		/// <summary>
		/// Gets or sets the JobExecution section of the DOM Instance.
		/// </summary>
		public JobExecutionSection JobExecution { get; set; }

		/// <summary>
		/// Gets or sets the NodeRelationships section of the DOM Instance.
		/// </summary>
		public IList<NodeRelationshipsSection> NodeRelationships { get; private set; }

		/// <summary>
		/// Gets or sets the RecurringInfo section of the DOM Instance.
		/// </summary>
		public RecurringInfoSection RecurringInfo { get; set; }

		public static explicit operator RecurringJobsInstance(DomInstance instance)
		{
			return new RecurringJobsInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			foreach (var item in Errors)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			foreach (var item in Nodes)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			if (CostingAndBilling != null && !CostingAndBilling.IsEmpty)
			{
				domInstance.Sections.Add(CostingAndBilling.ToSection());
			}

			domInstance.Sections.Add(MonitoringSettings.ToSection());
			foreach (var item in Connections)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(JobInfo.ToSection());
			domInstance.Sections.Add(JobExecution.ToSection());
			foreach (var item in NodeRelationships)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(RecurringInfo.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			Errors = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Errors.Id)).Select(section => new ErrorsSection(section)).ToList();
			Nodes = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Nodes.Id)).Select(section => new NodesSection(section)).ToList();
			var _costingAndBilling = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBilling.Id));
			if (_costingAndBilling is null)
			{
				CostingAndBilling = new CostingAndBillingSection();
			}
			else
			{
				CostingAndBilling = new CostingAndBillingSection(_costingAndBilling);
			}

			var _monitoringSettings = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MonitoringSettings.Id));
			if (_monitoringSettings is null)
			{
				MonitoringSettings = new MonitoringSettingsSection();
			}
			else
			{
				MonitoringSettings = new MonitoringSettingsSection(_monitoringSettings);
			}

			Connections = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Connections.Id)).Select(section => new ConnectionsSection(section)).ToList();
			var _jobInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobInfo.Id));
			if (_jobInfo is null)
			{
				JobInfo = new JobInfoSection();
			}
			else
			{
				JobInfo = new JobInfoSection(_jobInfo);
			}

			var _jobExecution = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobExecution.Id));
			if (_jobExecution is null)
			{
				JobExecution = new JobExecutionSection();
			}
			else
			{
				JobExecution = new JobExecutionSection(_jobExecution);
			}

			NodeRelationships = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.NodeRelationships.Id)).Select(section => new NodeRelationshipsSection(section)).ToList();
			var _recurringInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.RecurringInfo.Id));
			if (_recurringInfo is null)
			{
				RecurringInfo = new RecurringInfoSection();
			}
			else
			{
				RecurringInfo = new RecurringInfoSection(_recurringInfo);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobsInstance DOM instance.
	/// The <see cref="JobsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobsInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobsInstance"/> class. Creates an empty <see cref="JobsInstance"/> instance with default settings.
		/// </summary>
		public JobsInstance() : base(SlcWorkflowIds.Definitions.Jobs)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobsInstance"/> class. Creates an empty <see cref="JobsInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public JobsInstance(Guid id) : base(SlcWorkflowIds.Definitions.Jobs, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="JobsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobsInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Jobs))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Jobs)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets the Status ID of the DOM Instance.
		/// </summary>
		public SlcWorkflowIds.Behaviors.Job_Behavior.StatusesEnum Status
		{
			get
			{
				return SlcWorkflowIds.Behaviors.Job_Behavior.Statuses.ToEnum(StatusId);
			}
		}

		/// <summary>
		/// Gets or sets the Errors section of the DOM Instance.
		/// </summary>
		public IList<ErrorsSection> Errors { get; private set; }

		/// <summary>
		/// Gets or sets the Nodes section of the DOM Instance.
		/// </summary>
		public IList<NodesSection> Nodes { get; private set; }

		/// <summary>
		/// Gets or sets the CostingAndBilling section of the DOM Instance.
		/// </summary>
		public CostingAndBillingSection CostingAndBilling { get; set; }

		/// <summary>
		/// Gets or sets the MonitoringSettings section of the DOM Instance.
		/// </summary>
		public MonitoringSettingsSection MonitoringSettings { get; set; }

		/// <summary>
		/// Gets or sets the Connections section of the DOM Instance.
		/// </summary>
		public IList<ConnectionsSection> Connections { get; private set; }

		/// <summary>
		/// Gets or sets the JobInfo section of the DOM Instance.
		/// </summary>
		public JobInfoSection JobInfo { get; set; }

		/// <summary>
		/// Gets or sets the CostingAndBillingDetails section of the DOM Instance.
		/// </summary>
		public IList<CostingAndBillingDetailsSection> CostingAndBillingDetails { get; private set; }

		/// <summary>
		/// Gets or sets the JobExecution section of the DOM Instance.
		/// </summary>
		public JobExecutionSection JobExecution { get; set; }

		/// <summary>
		/// Gets or sets the NodeRelationships section of the DOM Instance.
		/// </summary>
		public IList<NodeRelationshipsSection> NodeRelationships { get; private set; }

		public static explicit operator JobsInstance(DomInstance instance)
		{
			return new JobsInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			foreach (var item in Errors)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			foreach (var item in Nodes)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			if (CostingAndBilling != null && !CostingAndBilling.IsEmpty)
			{
				domInstance.Sections.Add(CostingAndBilling.ToSection());
			}

			domInstance.Sections.Add(MonitoringSettings.ToSection());
			foreach (var item in Connections)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(JobInfo.ToSection());
			foreach (var item in CostingAndBillingDetails)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(JobExecution.ToSection());
			foreach (var item in NodeRelationships)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			Errors = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Errors.Id)).Select(section => new ErrorsSection(section)).ToList();
			Nodes = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Nodes.Id)).Select(section => new NodesSection(section)).ToList();
			var _costingAndBilling = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBilling.Id));
			if (_costingAndBilling is null)
			{
				CostingAndBilling = new CostingAndBillingSection();
			}
			else
			{
				CostingAndBilling = new CostingAndBillingSection(_costingAndBilling);
			}

			var _monitoringSettings = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MonitoringSettings.Id));
			if (_monitoringSettings is null)
			{
				MonitoringSettings = new MonitoringSettingsSection();
			}
			else
			{
				MonitoringSettings = new MonitoringSettingsSection(_monitoringSettings);
			}

			Connections = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Connections.Id)).Select(section => new ConnectionsSection(section)).ToList();
			var _jobInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobInfo.Id));
			if (_jobInfo is null)
			{
				JobInfo = new JobInfoSection();
			}
			else
			{
				JobInfo = new JobInfoSection(_jobInfo);
			}

			CostingAndBillingDetails = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBillingDetails.Id)).Select(section => new CostingAndBillingDetailsSection(section)).ToList();
			var _jobExecution = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobExecution.Id));
			if (_jobExecution is null)
			{
				JobExecution = new JobExecutionSection();
			}
			else
			{
				JobExecution = new JobExecutionSection(_jobExecution);
			}

			NodeRelationships = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.NodeRelationships.Id)).Select(section => new NodeRelationshipsSection(section)).ToList();
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobsLiteInstance DOM instance.
	/// The <see cref="JobsLiteInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobsLiteInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobsLiteInstance"/> class. Creates an empty <see cref="JobsLiteInstance"/> instance with default settings.
		/// </summary>
		public JobsLiteInstance() : base(SlcWorkflowIds.Definitions.JobsLite)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobsLiteInstance"/> class. Creates an empty <see cref="JobsLiteInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public JobsLiteInstance(Guid id) : base(SlcWorkflowIds.Definitions.JobsLite, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobsLiteInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="JobsLiteInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobsLiteInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.JobsLite))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.JobsLite)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the Errors section of the DOM Instance.
		/// </summary>
		public IList<ErrorsSection> Errors { get; private set; }

		/// <summary>
		/// Gets or sets the JobLiteMetadata section of the DOM Instance.
		/// </summary>
		public JobLiteMetadataSection JobLiteMetadata { get; set; }

		/// <summary>
		/// Gets or sets the CostingAndBilling section of the DOM Instance.
		/// </summary>
		public CostingAndBillingSection CostingAndBilling { get; set; }

		/// <summary>
		/// Gets or sets the JobInfo section of the DOM Instance.
		/// </summary>
		public JobInfoSection JobInfo { get; set; }

		public static explicit operator JobsLiteInstance(DomInstance instance)
		{
			return new JobsLiteInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			foreach (var item in Errors)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(JobLiteMetadata.ToSection());
			if (CostingAndBilling != null && !CostingAndBilling.IsEmpty)
			{
				domInstance.Sections.Add(CostingAndBilling.ToSection());
			}

			domInstance.Sections.Add(JobInfo.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			Errors = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Errors.Id)).Select(section => new ErrorsSection(section)).ToList();
			var _jobLiteMetadata = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobLiteMetadata.Id));
			if (_jobLiteMetadata is null)
			{
				JobLiteMetadata = new JobLiteMetadataSection();
			}
			else
			{
				JobLiteMetadata = new JobLiteMetadataSection(_jobLiteMetadata);
			}

			var _costingAndBilling = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.CostingAndBilling.Id));
			if (_costingAndBilling is null)
			{
				CostingAndBilling = new CostingAndBillingSection();
			}
			else
			{
				CostingAndBilling = new CostingAndBillingSection(_costingAndBilling);
			}

			var _jobInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobInfo.Id));
			if (_jobInfo is null)
			{
				JobInfo = new JobInfoSection();
			}
			else
			{
				JobInfo = new JobInfoSection(_jobInfo);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a RatesInstance DOM instance.
	/// The <see cref="RatesInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class RatesInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="RatesInstance"/> class. Creates an empty <see cref="RatesInstance"/> instance with default settings.
		/// </summary>
		public RatesInstance() : base(SlcWorkflowIds.Definitions.Rates)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RatesInstance"/> class. Creates an empty <see cref="RatesInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public RatesInstance(Guid id) : base(SlcWorkflowIds.Definitions.Rates, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RatesInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="RatesInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public RatesInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Rates))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Rates)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the Rate section of the DOM Instance.
		/// </summary>
		public RateSection Rate { get; set; }

		public static explicit operator RatesInstance(DomInstance instance)
		{
			return new RatesInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			domInstance.Sections.Add(Rate.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _rate = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Rate.Id));
			if (_rate is null)
			{
				Rate = new RateSection();
			}
			else
			{
				Rate = new RateSection(_rate);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobNodeRelationshipActionsInstance DOM instance.
	/// The <see cref="JobNodeRelationshipActionsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobNodeRelationshipActionsInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobNodeRelationshipActionsInstance"/> class. Creates an empty <see cref="JobNodeRelationshipActionsInstance"/> instance with default settings.
		/// </summary>
		public JobNodeRelationshipActionsInstance() : base(SlcWorkflowIds.Definitions.JobNodeRelationshipActions)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobNodeRelationshipActionsInstance"/> class. Creates an empty <see cref="JobNodeRelationshipActionsInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public JobNodeRelationshipActionsInstance(Guid id) : base(SlcWorkflowIds.Definitions.JobNodeRelationshipActions, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobNodeRelationshipActionsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="JobNodeRelationshipActionsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobNodeRelationshipActionsInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.JobNodeRelationshipActions))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.JobNodeRelationshipActions)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the JobNodeRelationshipGeneralActions section of the DOM Instance.
		/// </summary>
		public JobNodeRelationshipGeneralActionsSection JobNodeRelationshipGeneralActions { get; set; }

		/// <summary>
		/// Gets or sets the JobNodeRelationshipReplaceActions section of the DOM Instance.
		/// </summary>
		public JobNodeRelationshipReplaceActionsSection JobNodeRelationshipReplaceActions { get; set; }

		public static explicit operator JobNodeRelationshipActionsInstance(DomInstance instance)
		{
			return new JobNodeRelationshipActionsInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			domInstance.Sections.Add(JobNodeRelationshipGeneralActions.ToSection());
			domInstance.Sections.Add(JobNodeRelationshipReplaceActions.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _jobNodeRelationshipGeneralActions = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id));
			if (_jobNodeRelationshipGeneralActions is null)
			{
				JobNodeRelationshipGeneralActions = new JobNodeRelationshipGeneralActionsSection();
			}
			else
			{
				JobNodeRelationshipGeneralActions = new JobNodeRelationshipGeneralActionsSection(_jobNodeRelationshipGeneralActions);
			}

			var _jobNodeRelationshipReplaceActions = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id));
			if (_jobNodeRelationshipReplaceActions is null)
			{
				JobNodeRelationshipReplaceActions = new JobNodeRelationshipReplaceActionsSection();
			}
			else
			{
				JobNodeRelationshipReplaceActions = new JobNodeRelationshipReplaceActionsSection(_jobNodeRelationshipReplaceActions);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a WorkflowsInstance DOM instance.
	/// The <see cref="WorkflowsInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class WorkflowsInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="WorkflowsInstance"/> class. Creates an empty <see cref="WorkflowsInstance"/> instance with default settings.
		/// </summary>
		public WorkflowsInstance() : base(SlcWorkflowIds.Definitions.Workflows)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="WorkflowsInstance"/> class. Creates an empty <see cref="WorkflowsInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public WorkflowsInstance(Guid id) : base(SlcWorkflowIds.Definitions.Workflows, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="WorkflowsInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="WorkflowsInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public WorkflowsInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Workflows))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Workflows)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets the Status ID of the DOM Instance.
		/// </summary>
		public SlcWorkflowIds.Behaviors.Workflow_Behavior.StatusesEnum Status
		{
			get
			{
				return SlcWorkflowIds.Behaviors.Workflow_Behavior.Statuses.ToEnum(StatusId);
			}
		}

		/// <summary>
		/// Gets or sets the Nodes section of the DOM Instance.
		/// </summary>
		public IList<NodesSection> Nodes { get; private set; }

		/// <summary>
		/// Gets or sets the MonitoringSettings section of the DOM Instance.
		/// </summary>
		public MonitoringSettingsSection MonitoringSettings { get; set; }

		/// <summary>
		/// Gets or sets the Connections section of the DOM Instance.
		/// </summary>
		public IList<ConnectionsSection> Connections { get; private set; }

		/// <summary>
		/// Gets or sets the WorkflowExecution section of the DOM Instance.
		/// </summary>
		public WorkflowExecutionSection WorkflowExecution { get; set; }

		/// <summary>
		/// Gets or sets the WorkflowInfo section of the DOM Instance.
		/// </summary>
		public WorkflowInfoSection WorkflowInfo { get; set; }

		public static explicit operator WorkflowsInstance(DomInstance instance)
		{
			return new WorkflowsInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			foreach (var item in Nodes)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(MonitoringSettings.ToSection());
			foreach (var item in Connections)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			domInstance.Sections.Add(WorkflowExecution.ToSection());
			domInstance.Sections.Add(WorkflowInfo.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			Nodes = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Nodes.Id)).Select(section => new NodesSection(section)).ToList();
			var _monitoringSettings = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.MonitoringSettings.Id));
			if (_monitoringSettings is null)
			{
				MonitoringSettings = new MonitoringSettingsSection();
			}
			else
			{
				MonitoringSettings = new MonitoringSettingsSection(_monitoringSettings);
			}

			Connections = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.Connections.Id)).Select(section => new ConnectionsSection(section)).ToList();
			var _workflowExecution = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.WorkflowExecution.Id));
			if (_workflowExecution is null)
			{
				WorkflowExecution = new WorkflowExecutionSection();
			}
			else
			{
				WorkflowExecution = new WorkflowExecutionSection(_workflowExecution);
			}

			var _workflowInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.WorkflowInfo.Id));
			if (_workflowInfo is null)
			{
				WorkflowInfo = new WorkflowInfoSection();
			}
			else
			{
				WorkflowInfo = new WorkflowInfoSection(_workflowInfo);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a ConfigurationInstance DOM instance.
	/// The <see cref="ConfigurationInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ConfigurationInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ConfigurationInstance"/> class. Creates an empty <see cref="ConfigurationInstance"/> instance with default settings.
		/// </summary>
		public ConfigurationInstance() : base(SlcWorkflowIds.Definitions.Configuration)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ConfigurationInstance"/> class. Creates an empty <see cref="ConfigurationInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public ConfigurationInstance(Guid id) : base(SlcWorkflowIds.Definitions.Configuration, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ConfigurationInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ConfigurationInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ConfigurationInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SlcWorkflowIds.Definitions.Configuration))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcWorkflowIds.Definitions.Configuration)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the ProfileParameterValues section of the DOM Instance.
		/// </summary>
		public IList<ProfileParameterValuesSection> ProfileParameterValues { get; private set; }

		public static explicit operator ConfigurationInstance(DomInstance instance)
		{
			return new ConfigurationInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			foreach (var item in ProfileParameterValues)
			{
				domInstance.Sections.Add(item.ToSection());
			}

			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			ProfileParameterValues = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcWorkflowIds.Sections.ProfileParameterValues.Id)).Select(section => new ProfileParameterValuesSection(section)).ToList();
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcWorkflow
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Apps.Sections.Sections;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Sections;

	/// <summary>
	/// Represents a wrapper class for accessing a ErrorsSection section.
	/// The <see cref="ErrorsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ErrorsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ErrorsSection"/> class. Creates an empty <see cref="ErrorsSection"/> object with default settings.
		/// </summary>
		public ErrorsSection() : base(SlcWorkflowIds.Sections.Errors.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ErrorsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ErrorsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ErrorsSection(Section section) : base(section, SlcWorkflowIds.Sections.Errors.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ErrorCode field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ErrorCode
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorCode);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Errors.ErrorCode);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Errors.ErrorCode, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ErrorMessage field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ErrorMessage
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorMessage);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Errors.ErrorMessage);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Errors.ErrorMessage, (String)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorCode) == null)
				throw new InvalidOperationException("'ErrorCode' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<String>(SlcWorkflowIds.Sections.Errors.ErrorMessage) == null)
				throw new InvalidOperationException("'ErrorMessage' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a RateSection section.
	/// The <see cref="RateSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class RateSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="RateSection"/> class. Creates an empty <see cref="RateSection"/> object with default settings.
		/// </summary>
		public RateSection() : base(SlcWorkflowIds.Sections.Rate.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RateSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="RateSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public RateSection(Section section) : base(section, SlcWorkflowIds.Sections.Rate.Id)
		{
		}

		/// <summary>
		/// Gets or sets the Qty field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? Qty
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.Rate.Qty);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.Qty);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.Qty, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the QtyType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.QtytypeEnum? QtyType
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Rate.QtyType);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.QtytypeEnum?)SlcWorkflowIds.Enums.Qtytype.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.QtyType);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.QtyType, SlcWorkflowIds.Enums.Qtytype.ToValue((SlcWorkflowIds.Enums.QtytypeEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the AmountPerUnit field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? AmountPerUnit
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.Rate.AmountPerUnit);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.AmountPerUnit);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.AmountPerUnit, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the TotalAmount field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? TotalAmount
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.Rate.TotalAmount);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.TotalAmount);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.TotalAmount, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the TotalNetAmount field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? TotalNetAmount
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.Rate.TotalNetAmount);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Rate.TotalNetAmount);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Rate.TotalNetAmount, (Double)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<Int64>(SlcWorkflowIds.Sections.Rate.Qty) == null)
				throw new InvalidOperationException("'Qty' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<String>(SlcWorkflowIds.Sections.Rate.QtyType) == null)
				throw new InvalidOperationException("'QtyType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobNodeRelationshipGeneralActionsSection section.
	/// The <see cref="JobNodeRelationshipGeneralActionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobNodeRelationshipGeneralActionsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobNodeRelationshipGeneralActionsSection"/> class. Creates an empty <see cref="JobNodeRelationshipGeneralActionsSection"/> object with default settings.
		/// </summary>
		public JobNodeRelationshipGeneralActionsSection() : base(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobNodeRelationshipGeneralActionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobNodeRelationshipGeneralActionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobNodeRelationshipGeneralActionsSection(Section section) : base(section, SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.Id)
		{
		}

		/// <summary>
		/// Gets or sets the BookingAction field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Bookingaction? BookingAction
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Bookingaction?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DeleteAction field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Deleteaction? DeleteAction
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Deleteaction?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction, (Int32)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.BookingAction) == null)
				throw new InvalidOperationException("'BookingAction' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipGeneralActions.DeleteAction) == null)
				throw new InvalidOperationException("'DeleteAction' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobLiteMetadataSection section.
	/// The <see cref="JobLiteMetadataSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobLiteMetadataSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobLiteMetadataSection"/> class. Creates an empty <see cref="JobLiteMetadataSection"/> object with default settings.
		/// </summary>
		public JobLiteMetadataSection() : base(SlcWorkflowIds.Sections.JobLiteMetadata.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobLiteMetadataSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobLiteMetadataSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobLiteMetadataSection(Section section) : base(section, SlcWorkflowIds.Sections.JobLiteMetadata.Id)
		{
		}

		/// <summary>
		/// Gets or sets the FullJobID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? FullJobID
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobLiteMetadata.FullJobID);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobLiteMetadata.FullJobID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobLiteMetadata.FullJobID, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobState field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Jobstate? JobState
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobLiteMetadata.JobState);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Jobstate?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobLiteMetadata.JobState);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobLiteMetadata.JobState, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the LinkedResourcesMetadata field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String LinkedResourcesMetadata
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobLiteMetadata.LinkedResourcesMetadata);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobLiteMetadata.LinkedResourcesMetadata);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobLiteMetadata.LinkedResourcesMetadata, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobDuration field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public TimeSpan? JobDuration
		{
			get
			{
				var wrapper = section.GetValue<TimeSpan>(SlcWorkflowIds.Sections.JobLiteMetadata.JobDuration);
				if (wrapper != null)
				{
					return (TimeSpan?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobLiteMetadata.JobDuration);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobLiteMetadata.JobDuration, (TimeSpan)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<Guid>(SlcWorkflowIds.Sections.JobLiteMetadata.FullJobID) == null)
				throw new InvalidOperationException("'FullJobID' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a SessionDataStoreSection section.
	/// The <see cref="SessionDataStoreSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class SessionDataStoreSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="SessionDataStoreSection"/> class. Creates an empty <see cref="SessionDataStoreSection"/> object with default settings.
		/// </summary>
		public SessionDataStoreSection() : base(SlcWorkflowIds.Sections.SessionDataStore.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="SessionDataStoreSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="SessionDataStoreSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public SessionDataStoreSection(Section section) : base(section, SlcWorkflowIds.Sections.SessionDataStore.Id)
		{
		}

		/// <summary>
		/// Gets or sets the JobId field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobId
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionDataStore.JobId);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionDataStore.JobId);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionDataStore.JobId, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobSettingsSection section.
	/// The <see cref="JobSettingsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobSettingsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobSettingsSection"/> class. Creates an empty <see cref="JobSettingsSection"/> object with default settings.
		/// </summary>
		public JobSettingsSection() : base(SlcWorkflowIds.Sections.JobSettings.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobSettingsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobSettingsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobSettingsSection(Section section) : base(section, SlcWorkflowIds.Sections.JobSettings.Id)
		{
		}

		/// <summary>
		/// Gets or sets the JobIDPrefix field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobIDPrefix
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobSettings.JobIDPrefix);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDPrefix);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDPrefix, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobIDMinimumDigits field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? JobIDMinimumDigits
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDMinimumDigits);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDMinimumDigits);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDMinimumDigits, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobIDStartingSeed field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? JobIDStartingSeed
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDStartingSeed);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDStartingSeed);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDStartingSeed, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobIDIncrement field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? JobIDIncrement
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDIncrement);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDIncrement);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDIncrement, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobIDNextSequence field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? JobIDNextSequence
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.JobSettings.JobIDNextSequence);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.JobIDNextSequence);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.JobIDNextSequence, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DefaultPreroll field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public TimeSpan? DefaultPreroll
		{
			get
			{
				var wrapper = section.GetValue<TimeSpan>(SlcWorkflowIds.Sections.JobSettings.DefaultPreroll);
				if (wrapper != null)
				{
					return (TimeSpan?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.DefaultPreroll);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.DefaultPreroll, (TimeSpan)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DefaultPostroll field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public TimeSpan? DefaultPostroll
		{
			get
			{
				var wrapper = section.GetValue<TimeSpan>(SlcWorkflowIds.Sections.JobSettings.DefaultPostroll);
				if (wrapper != null)
				{
					return (TimeSpan?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobSettings.DefaultPostroll);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobSettings.DefaultPostroll, (TimeSpan)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a NodesSection section.
	/// The <see cref="NodesSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class NodesSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="NodesSection"/> class. Creates an empty <see cref="NodesSection"/> object with default settings.
		/// </summary>
		public NodesSection() : base(SlcWorkflowIds.Sections.Nodes.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="NodesSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="NodesSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public NodesSection(Section section) : base(section, SlcWorkflowIds.Sections.Nodes.Id)
		{
		}

		/// <summary>
		/// Gets or sets the NodeID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String NodeID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeAlias field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String NodeAlias
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeAlias);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeAlias);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeAlias, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Nodetype? NodeType
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.NodeType);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Nodetype?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeType);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeType, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeReferenceID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String NodeReferenceID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeReferenceID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeReferenceID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeReferenceID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeParentReferenceID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String NodeParentReferenceID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeParentReferenceID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeParentReferenceID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeParentReferenceID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeIcon field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String NodeIcon
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.NodeIcon);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeIcon);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeIcon, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the AutomaticConfiguration field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? AutomaticConfiguration
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.AutomaticConfiguration);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.AutomaticConfiguration);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.AutomaticConfiguration, (Boolean)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ConfigurationParameters field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ConfigurationParameters
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.ConfigurationParameters);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ConfigurationParameters);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ConfigurationParameters, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the AdHocControlScript field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String AdHocControlScript
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.AdHocControlScript);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.AdHocControlScript);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.AdHocControlScript, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeConfigurationExecutionOrder field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? NodeConfigurationExecutionOrder
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.Nodes.NodeConfigurationExecutionOrder);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeConfigurationExecutionOrder);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeConfigurationExecutionOrder, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ReserveNode field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? ReserveNode
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.ReserveNode);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ReserveNode);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ReserveNode, (Boolean)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Hidden field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? Hidden
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.Hidden);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.Hidden);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.Hidden, (Boolean)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeStartTime field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? NodeStartTime
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.Nodes.NodeStartTime);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeStartTime);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeStartTime, (DateTime)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeEndTime field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? NodeEndTime
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.Nodes.NodeEndTime);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeEndTime);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeEndTime, (DateTime)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the LinkedBookingIds field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String LinkedBookingIds
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Nodes.LinkedBookingIds);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.LinkedBookingIds);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.LinkedBookingIds, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ResourceSelectMode field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Resourceselectmode? ResourceSelectMode
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.ResourceSelectMode);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Resourceselectmode?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ResourceSelectMode);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ResourceSelectMode, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ResourceSelectState field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Resourceselectstate? ResourceSelectState
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.ResourceSelectState);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Resourceselectstate?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.ResourceSelectState);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.ResourceSelectState, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Billable field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? Billable
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.Nodes.Billable);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.Billable);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.Billable, (Boolean)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeConfiguration field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? NodeConfiguration
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.Nodes.NodeConfiguration);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeConfiguration);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeConfiguration, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the NodeConfigurationStatus field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Nodeconfigurationstatus? NodeConfigurationStatus
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Nodes.NodeConfigurationStatus);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Nodeconfigurationstatus?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Nodes.NodeConfigurationStatus);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Nodes.NodeConfigurationStatus, (Int32)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a CostingAndBillingSection section.
	/// The <see cref="CostingAndBillingSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class CostingAndBillingSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="CostingAndBillingSection"/> class. Creates an empty <see cref="CostingAndBillingSection"/> object with default settings.
		/// </summary>
		public CostingAndBillingSection() : base(SlcWorkflowIds.Sections.CostingAndBilling.Id)
		{
			AdditionalContacts = new List<Guid>();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="CostingAndBillingSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="CostingAndBillingSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public CostingAndBillingSection(Section section) : base(section, SlcWorkflowIds.Sections.CostingAndBilling.Id)
		{
			var additionalContacts = section.GetListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.AdditionalContacts);
			AdditionalContacts = additionalContacts != null ? additionalContacts.Values : new List<Guid>();
		}

		/// <summary>
		/// Gets or sets the Organization field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? Organization
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.Organization);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.Organization);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.Organization, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobOwner field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? JobOwner
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.JobOwner);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.JobOwner);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.JobOwner, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the AdditionalContacts field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public IList<Guid> AdditionalContacts { get; private set; }

		/// <summary>
		/// Gets or sets the Contract field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? Contract
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.Contract);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.Contract);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.Contract, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobStatus field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobStatus
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBilling.JobStatus);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.JobStatus);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.JobStatus, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ContractUplift field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? ContractUplift
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.ContractUplift);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.ContractUplift);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.ContractUplift, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ContractDiscount field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? ContractDiscount
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.ContractDiscount);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.ContractDiscount);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.ContractDiscount, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the SpeedOrderIncrementOnTopOfBillingPrice field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? SpeedOrderIncrementOnTopOfBillingPrice
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderIncrementOnTopOfBillingPrice);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderIncrementOnTopOfBillingPrice);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderIncrementOnTopOfBillingPrice, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the SpeedOrderFixedFee field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? SpeedOrderFixedFee
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderFixedFee);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderFixedFee);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.SpeedOrderFixedFee, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the CancellationOfBillingPrice field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? CancellationOfBillingPrice
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.CancellationOfBillingPrice);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.CancellationOfBillingPrice);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.CancellationOfBillingPrice, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the CancellationFixedFee field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String CancellationFixedFee
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBilling.CancellationFixedFee);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.CancellationFixedFee);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.CancellationFixedFee, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the LastBillCalculation field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? LastBillCalculation
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.CostingAndBilling.LastBillCalculation);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.LastBillCalculation);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.LastBillCalculation, (DateTime)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the TotalBillNetAmount field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? TotalBillNetAmount
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetAmount);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetAmount);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetAmount, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the TotalBillNetOverrideAmount field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? TotalBillNetOverrideAmount
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetOverrideAmount);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetOverrideAmount);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.TotalBillNetOverrideAmount, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the BillCurrency field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? BillCurrency
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.BillCurrency);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.BillCurrency);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBilling.BillCurrency, (Guid)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (AdditionalContacts.Count == 0)
				section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBilling.AdditionalContacts);
			else
				section.AddOrUpdateListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBilling.AdditionalContacts, AdditionalContacts.ToList());
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a MonitoringSettingsSection section.
	/// The <see cref="MonitoringSettingsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class MonitoringSettingsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="MonitoringSettingsSection"/> class. Creates an empty <see cref="MonitoringSettingsSection"/> object with default settings.
		/// </summary>
		public MonitoringSettingsSection() : base(SlcWorkflowIds.Sections.MonitoringSettings.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="MonitoringSettingsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="MonitoringSettingsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public MonitoringSettingsSection(Section section) : base(section, SlcWorkflowIds.Sections.MonitoringSettings.Id)
		{
		}

		/// <summary>
		/// Gets or sets the AtJobStart field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Atjobstart? AtJobStart
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.MonitoringSettings.AtJobStart);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Atjobstart?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.AtJobStart);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.AtJobStart, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the AtJobEnd field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Atjobend? AtJobEnd
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.MonitoringSettings.AtJobEnd);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Atjobend?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.AtJobEnd);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.AtJobEnd, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the MonitoringServiceTemplate field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String MonitoringServiceTemplate
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceTemplate);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceTemplate);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceTemplate, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the MonitoringServiceID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String MonitoringServiceID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.MonitoringSettings.MonitoringServiceID, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a SessionFilterSection section.
	/// The <see cref="SessionFilterSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class SessionFilterSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="SessionFilterSection"/> class. Creates an empty <see cref="SessionFilterSection"/> object with default settings.
		/// </summary>
		public SessionFilterSection() : base(SlcWorkflowIds.Sections.SessionFilter.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="SessionFilterSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="SessionFilterSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public SessionFilterSection(Section section) : base(section, SlcWorkflowIds.Sections.SessionFilter.Id)
		{
		}

		/// <summary>
		/// Gets or sets the FilterType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Filtertype? FilterType
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.SessionFilter.FilterType);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Filtertype?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionFilter.FilterType);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionFilter.FilterType, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the FilterKey field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String FilterKey
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionFilter.FilterKey);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionFilter.FilterKey);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionFilter.FilterKey, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the FilterValues field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String FilterValues
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionFilter.FilterValues);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionFilter.FilterValues);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionFilter.FilterValues, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobNodeRelationshipReplaceActionsSection section.
	/// The <see cref="JobNodeRelationshipReplaceActionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobNodeRelationshipReplaceActionsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobNodeRelationshipReplaceActionsSection"/> class. Creates an empty <see cref="JobNodeRelationshipReplaceActionsSection"/> object with default settings.
		/// </summary>
		public JobNodeRelationshipReplaceActionsSection() : base(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobNodeRelationshipReplaceActionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobNodeRelationshipReplaceActionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobNodeRelationshipReplaceActionsSection(Section section) : base(section, SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ReplaceAction field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Replaceaction? ReplaceAction
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Replaceaction?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ExecutePoolLinks field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? ExecutePoolLinks
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecutePoolLinks);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecutePoolLinks);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecutePoolLinks, (Boolean)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ExecuteBookingExtensionScript field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? ExecuteBookingExtensionScript
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecuteBookingExtensionScript);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecuteBookingExtensionScript);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ExecuteBookingExtensionScript, (Boolean)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<Int32>(SlcWorkflowIds.Sections.JobNodeRelationshipReplaceActions.ReplaceAction) == null)
				throw new InvalidOperationException("'ReplaceAction' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a ConnectionsSection section.
	/// The <see cref="ConnectionsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ConnectionsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ConnectionsSection"/> class. Creates an empty <see cref="ConnectionsSection"/> object with default settings.
		/// </summary>
		public ConnectionsSection() : base(SlcWorkflowIds.Sections.Connections.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ConnectionsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ConnectionsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ConnectionsSection(Section section) : base(section, SlcWorkflowIds.Sections.Connections.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ConnectionID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ConnectionID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the SourceNodeID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String SourceNodeID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.SourceNodeID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.SourceNodeID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.SourceNodeID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DestinationNodeID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String DestinationNodeID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.DestinationNodeID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.DestinationNodeID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.DestinationNodeID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ConnectionAlias field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ConnectionAlias
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionAlias);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionAlias);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionAlias, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ConnectionExecutionOrder field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Int64? ConnectionExecutionOrder
		{
			get
			{
				var wrapper = section.GetValue<Int64>(SlcWorkflowIds.Sections.Connections.ConnectionExecutionOrder);
				if (wrapper != null)
				{
					return (Int64?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionExecutionOrder);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionExecutionOrder, (Int64)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ConnectionType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Connectiontype? ConnectionType
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Connections.ConnectionType);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Connectiontype?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionType);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionType, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ConnectionSubtype field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Connectionsubtype? ConnectionSubtype
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Connections.ConnectionSubtype);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Connectionsubtype?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionSubtype);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionSubtype, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the PredefinedSubset field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Predefinedsubset? PredefinedSubset
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.Connections.PredefinedSubset);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Predefinedsubset?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.PredefinedSubset);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.PredefinedSubset, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ConnectionDetails field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ConnectionDetails
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionDetails);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionDetails);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionDetails, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ConnectionExecutionScript field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ConnectionExecutionScript
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.Connections.ConnectionExecutionScript);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.Connections.ConnectionExecutionScript);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.Connections.ConnectionExecutionScript, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobInfoSection section.
	/// The <see cref="JobInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobInfoSection"/> class. Creates an empty <see cref="JobInfoSection"/> object with default settings.
		/// </summary>
		public JobInfoSection() : base(SlcWorkflowIds.Sections.JobInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobInfoSection(Section section) : base(section, SlcWorkflowIds.Sections.JobInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the JobID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobName);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobDescription field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobDescription
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobDescription);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobDescription);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobDescription, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Workflow field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? Workflow
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobInfo.Workflow);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.Workflow);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.Workflow, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobStart field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? JobStart
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobStart);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobStart);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobStart, (DateTime)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobEnd field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? JobEnd
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobEnd);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobEnd);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobEnd, (DateTime)value);
				}
			}
		}

		[Obsolete("The FieldDescriptor, this property represents, is marked as SoftDeleted, in the SectionDefinition.")]
		/// <summary>
		/// Gets the ApproxOutDuration field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// </remarks>
		public TimeSpan? ApproxOutDuration
		{
			get
			{
				var wrapper = section.GetValue<TimeSpan>(SlcWorkflowIds.Sections.JobInfo.ApproxOutDuration);
				if (wrapper != null)
				{
					return (TimeSpan?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}
		}

		[Obsolete("The FieldDescriptor, this property represents, is marked as SoftDeleted, in the SectionDefinition.")]
		/// <summary>
		/// Gets the ApproxOutTime field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// </remarks>
		public DateTime? ApproxOutTime
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.ApproxOutTime);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobPriority field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Jobpriority? JobPriority
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobInfo.JobPriority);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Jobpriority?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobPriority);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobPriority, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobSource field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobSource
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobSource);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobSource);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobSource, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobNotes field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobNotes
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobNotes);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobNotes);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobNotes, (String)value);
				}
			}
		}

		[Obsolete("The FieldDescriptor, this property represents, is marked as SoftDeleted, in the SectionDefinition.")]
		/// <summary>
		/// Gets the OriginalJobStart field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// </remarks>
		public DateTime? OriginalJobStart
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.OriginalJobStart);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}
		}

		[Obsolete("The FieldDescriptor, this property represents, is marked as SoftDeleted, in the SectionDefinition.")]
		/// <summary>
		/// Gets the OriginalJobEnd field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// </remarks>
		public DateTime? OriginalJobEnd
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.OriginalJobEnd);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}
		}

		[Obsolete("The FieldDescriptor, this property represents, is marked as SoftDeleted, in the SectionDefinition.")]
		/// <summary>
		/// Gets the JobConfirmation field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// </remarks>
		public DateTime? JobConfirmation
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobConfirmation);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}
		}

		[Obsolete("The FieldDescriptor, this property represents, is marked as SoftDeleted, in the SectionDefinition.")]
		/// <summary>
		/// Gets the JobCancellation field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// </remarks>
		public DateTime? JobCancellation
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobCancellation);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}
		}

		/// <summary>
		/// Gets or sets the ActionNeeded field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? ActionNeeded
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.JobInfo.ActionNeeded);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.ActionNeeded);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.ActionNeeded, (Boolean)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the LockedBy field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String LockedBy
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.LockedBy);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.LockedBy);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.LockedBy, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Preroll field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? Preroll
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.Preroll);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.Preroll);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.Preroll, (DateTime)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Postroll field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? Postroll
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.Postroll);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.Postroll);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.Postroll, (DateTime)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobSeriesID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobSeriesID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobSeriesID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobInfo.JobSeriesID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobInfo.JobSeriesID, (String)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<String>(SlcWorkflowIds.Sections.JobInfo.JobName) == null)
				throw new InvalidOperationException("'JobName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobStart) == null)
				throw new InvalidOperationException("'JobStart' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<DateTime>(SlcWorkflowIds.Sections.JobInfo.JobEnd) == null)
				throw new InvalidOperationException("'JobEnd' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a CostingAndBillingDetailsSection section.
	/// The <see cref="CostingAndBillingDetailsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class CostingAndBillingDetailsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="CostingAndBillingDetailsSection"/> class. Creates an empty <see cref="CostingAndBillingDetailsSection"/> object with default settings.
		/// </summary>
		public CostingAndBillingDetailsSection() : base(SlcWorkflowIds.Sections.CostingAndBillingDetails.Id)
		{
			Rates = new List<Guid>();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="CostingAndBillingDetailsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="CostingAndBillingDetailsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public CostingAndBillingDetailsSection(Section section) : base(section, SlcWorkflowIds.Sections.CostingAndBillingDetails.Id)
		{
			var rates = section.GetListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Rates);
			Rates = rates != null ? rates.Values : new List<Guid>();
		}

		/// <summary>
		/// Gets or sets the LineItemType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.LineitemtypeEnum? LineItemType
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.LineItemType);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.LineitemtypeEnum?)SlcWorkflowIds.Enums.Lineitemtype.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.LineItemType);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.LineItemType, SlcWorkflowIds.Enums.Lineitemtype.ToValue((SlcWorkflowIds.Enums.LineitemtypeEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the ObjectType field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.ObjecttypeEnum? ObjectType
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectType);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.ObjecttypeEnum?)SlcWorkflowIds.Enums.Objecttype.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectType);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectType, SlcWorkflowIds.Enums.Objecttype.ToValue((SlcWorkflowIds.Enums.ObjecttypeEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the ObjectID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ObjectID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.ObjectID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Description field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String Description
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Description);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.Description);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.Description, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the RateCard field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? RateCard
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.RateCard);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.RateCard);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.RateCard, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the TotalNetOverrideAmount field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? TotalNetOverrideAmount
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.CostingAndBillingDetails.TotalNetOverrideAmount);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.TotalNetOverrideAmount);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.TotalNetOverrideAmount, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Currency field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? Currency
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Currency);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.Currency);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.CostingAndBillingDetails.Currency, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Rates field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public IList<Guid> Rates { get; private set; }

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (Rates.Count == 0)
				section.RemoveFieldValueById(SlcWorkflowIds.Sections.CostingAndBillingDetails.Rates);
			else
				section.AddOrUpdateListValue<Guid>(SlcWorkflowIds.Sections.CostingAndBillingDetails.Rates, Rates.ToList());
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a WorkflowExecutionSection section.
	/// The <see cref="WorkflowExecutionSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class WorkflowExecutionSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="WorkflowExecutionSection"/> class. Creates an empty <see cref="WorkflowExecutionSection"/> object with default settings.
		/// </summary>
		public WorkflowExecutionSection() : base(SlcWorkflowIds.Sections.WorkflowExecution.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="WorkflowExecutionSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="WorkflowExecutionSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public WorkflowExecutionSection(Section section) : base(section, SlcWorkflowIds.Sections.WorkflowExecution.Id)
		{
		}

		/// <summary>
		/// Gets or sets the WorkflowExecutionScript field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String WorkflowExecutionScript
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowExecutionScript);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowExecutionScript);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowExecutionScript, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the WorkflowConfiguration field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? WorkflowConfiguration
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowConfiguration);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowConfiguration);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowExecution.WorkflowConfiguration, (Guid)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a ProfileParameterValuesSection section.
	/// The <see cref="ProfileParameterValuesSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ProfileParameterValuesSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ProfileParameterValuesSection"/> class. Creates an empty <see cref="ProfileParameterValuesSection"/> object with default settings.
		/// </summary>
		public ProfileParameterValuesSection() : base(SlcWorkflowIds.Sections.ProfileParameterValues.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ProfileParameterValuesSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ProfileParameterValuesSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ProfileParameterValuesSection(Section section) : base(section, SlcWorkflowIds.Sections.ProfileParameterValues.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ProfileParameterID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ProfileParameterID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the StringValue field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String StringValue
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.StringValue);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.StringValue);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.StringValue, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DoubleValue field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? DoubleValue
		{
			get
			{
				var wrapper = section.GetValue<Double>(SlcWorkflowIds.Sections.ProfileParameterValues.DoubleValue);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.DoubleValue);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.DoubleValue, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ReferenceID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ReferenceID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.ReferenceID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.ProfileParameterValues.ReferenceID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.ProfileParameterValues.ReferenceID, (String)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<String>(SlcWorkflowIds.Sections.ProfileParameterValues.ProfileParameterID) == null)
				throw new InvalidOperationException("'ProfileParameterID' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a SessionDataUserSection section.
	/// The <see cref="SessionDataUserSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class SessionDataUserSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="SessionDataUserSection"/> class. Creates an empty <see cref="SessionDataUserSection"/> object with default settings.
		/// </summary>
		public SessionDataUserSection() : base(SlcWorkflowIds.Sections.SessionDataUser.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="SessionDataUserSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="SessionDataUserSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public SessionDataUserSection(Section section) : base(section, SlcWorkflowIds.Sections.SessionDataUser.Id)
		{
		}

		/// <summary>
		/// Gets or sets the User field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String User
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.SessionDataUser.User);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.SessionDataUser.User);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.SessionDataUser.User, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a JobExecutionSection section.
	/// The <see cref="JobExecutionSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class JobExecutionSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="JobExecutionSection"/> class. Creates an empty <see cref="JobExecutionSection"/> object with default settings.
		/// </summary>
		public JobExecutionSection() : base(SlcWorkflowIds.Sections.JobExecution.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="JobExecutionSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="JobExecutionSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public JobExecutionSection(Section section) : base(section, SlcWorkflowIds.Sections.JobExecution.Id)
		{
		}

		/// <summary>
		/// Gets or sets the JobExecutionScript field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JobExecutionScript
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.JobExecution.JobExecutionScript);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobExecution.JobExecutionScript);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobExecution.JobExecutionScript, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobConfiguration field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? JobConfiguration
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.JobExecution.JobConfiguration);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobExecution.JobConfiguration);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobExecution.JobConfiguration, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the JobConfigurationStatus field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Jobconfigurationstatus? JobConfigurationStatus
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.JobExecution.JobConfigurationStatus);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Jobconfigurationstatus?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.JobExecution.JobConfigurationStatus);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.JobExecution.JobConfigurationStatus, (Int32)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a NodeRelationshipsSection section.
	/// The <see cref="NodeRelationshipsSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class NodeRelationshipsSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="NodeRelationshipsSection"/> class. Creates an empty <see cref="NodeRelationshipsSection"/> object with default settings.
		/// </summary>
		public NodeRelationshipsSection() : base(SlcWorkflowIds.Sections.NodeRelationships.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="NodeRelationshipsSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="NodeRelationshipsSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public NodeRelationshipsSection(Section section) : base(section, SlcWorkflowIds.Sections.NodeRelationships.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ParentNodeID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ParentNodeID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.NodeRelationships.ParentNodeID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.NodeRelationships.ParentNodeID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.NodeRelationships.ParentNodeID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ChildNodeID field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ChildNodeID
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.NodeRelationships.ChildNodeID);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.NodeRelationships.ChildNodeID);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.NodeRelationships.ChildNodeID, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the RelationshipAction field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? RelationshipAction
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SlcWorkflowIds.Sections.NodeRelationships.RelationshipAction);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.NodeRelationships.RelationshipAction);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.NodeRelationships.RelationshipAction, (Guid)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a RecurringInfoSection section.
	/// The <see cref="RecurringInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class RecurringInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="RecurringInfoSection"/> class. Creates an empty <see cref="RecurringInfoSection"/> object with default settings.
		/// </summary>
		public RecurringInfoSection() : base(SlcWorkflowIds.Sections.RecurringInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="RecurringInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="RecurringInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public RecurringInfoSection(Section section) : base(section, SlcWorkflowIds.Sections.RecurringInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the Duration field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public TimeSpan? Duration
		{
			get
			{
				var wrapper = section.GetValue<TimeSpan>(SlcWorkflowIds.Sections.RecurringInfo.Duration);
				if (wrapper != null)
				{
					return (TimeSpan?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurringInfo.Duration);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurringInfo.Duration, (TimeSpan)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the TimeZone field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String TimeZone
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.RecurringInfo.TimeZone);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurringInfo.TimeZone);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurringInfo.TimeZone, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the RecurringPattern field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String RecurringPattern
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.RecurringInfo.RecurringPattern);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurringInfo.RecurringPattern);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurringInfo.RecurringPattern, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ProcessStatus field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Processstatus? ProcessStatus
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.RecurringInfo.ProcessStatus);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Processstatus?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurringInfo.ProcessStatus);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurringInfo.ProcessStatus, (Int32)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DesiredJobStatus field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Desiredjobstatus? DesiredJobStatus
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.RecurringInfo.DesiredJobStatus);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Desiredjobstatus?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.RecurringInfo.DesiredJobStatus);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.RecurringInfo.DesiredJobStatus, (Int32)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<TimeSpan>(SlcWorkflowIds.Sections.RecurringInfo.Duration) == null)
				throw new InvalidOperationException("'Duration' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<String>(SlcWorkflowIds.Sections.RecurringInfo.TimeZone) == null)
				throw new InvalidOperationException("'TimeZone' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<String>(SlcWorkflowIds.Sections.RecurringInfo.RecurringPattern) == null)
				throw new InvalidOperationException("'RecurringPattern' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<Int32>(SlcWorkflowIds.Sections.RecurringInfo.ProcessStatus) == null)
				throw new InvalidOperationException("'ProcessStatus' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			if (section.GetValue<Int32>(SlcWorkflowIds.Sections.RecurringInfo.DesiredJobStatus) == null)
				throw new InvalidOperationException("'DesiredJobStatus' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a WorkflowInfoSection section.
	/// The <see cref="WorkflowInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class WorkflowInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="WorkflowInfoSection"/> class. Creates an empty <see cref="WorkflowInfoSection"/> object with default settings.
		/// </summary>
		public WorkflowInfoSection() : base(SlcWorkflowIds.Sections.WorkflowInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="WorkflowInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="WorkflowInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public WorkflowInfoSection(Section section) : base(section, SlcWorkflowIds.Sections.WorkflowInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the WorkflowName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String WorkflowName
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the WorkflowDescription field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String WorkflowDescription
		{
			get
			{
				var wrapper = section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowDescription);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowDescription);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowDescription, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Favorite field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Boolean? Favorite
		{
			get
			{
				var wrapper = section.GetValue<Boolean>(SlcWorkflowIds.Sections.WorkflowInfo.Favorite);
				if (wrapper != null)
				{
					return (Boolean?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.Favorite);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.Favorite, (Boolean)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the Priority field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SlcWorkflowIds.Enums.Priority? Priority
		{
			get
			{
				var wrapper = section.GetValue<Int32>(SlcWorkflowIds.Sections.WorkflowInfo.Priority);
				if (wrapper != null)
				{
					return (SlcWorkflowIds.Enums.Priority?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SlcWorkflowIds.Sections.WorkflowInfo.Priority);
				}
				else
				{
					section.AddOrUpdateValue(SlcWorkflowIds.Sections.WorkflowInfo.Priority, (Int32)value);
				}
			}
		}

		/// <inheritdoc />
		protected override Section InternalToSection()
		{
			if (section.GetValue<String>(SlcWorkflowIds.Sections.WorkflowInfo.WorkflowName) == null)
				throw new InvalidOperationException("'WorkflowName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
			return section;
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.Satellitefeeds
{
	using System;
	using System.ComponentModel;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Sections;

	public static class SatellitefeedsIds
	{
		public const string ModuleId = "satellitefeeds";
		public static class Enums
		{
			public static class Satellite
			{
				public const string ABS3 = "ABS 3";
				public const string ASTRA1 = "ASTRA 1";
				public const string ASTRA2 = "ASTRA 2";
				public const string ASTRA3 = "ASTRA 3";
				public const string EUT3 = "EUT 3";
				public const string EUT7 = "EUT 7";
				public const string EUT9 = "EUT 9";
				public const string EUT10 = "EUT 10";
				public const string EUT16 = "EUT 21";
				public const string EUT33 = "EUT 33";
				public const string HISPASAT30 = "HISPASAT 30";
				public const string HOTBIRD13 = "HOTBIRD 13";
				public const string SES4 = "SES 4";
				public const string SES5 = "SES 5";
				public const string NotFound = "Not found";
				public static string ToValue(SatelliteEnum @enum)
				{
					switch (@enum)
					{
						case SatelliteEnum.ABS3:
							return ABS3;
						case SatelliteEnum.ASTRA1:
							return ASTRA1;
						case SatelliteEnum.ASTRA2:
							return ASTRA2;
						case SatelliteEnum.ASTRA3:
							return ASTRA3;
						case SatelliteEnum.EUT3:
							return EUT3;
						case SatelliteEnum.EUT7:
							return EUT7;
						case SatelliteEnum.EUT9:
							return EUT9;
						case SatelliteEnum.EUT10:
							return EUT10;
						case SatelliteEnum.EUT16:
							return EUT16;
						case SatelliteEnum.EUT33:
							return EUT33;
						case SatelliteEnum.HISPASAT30:
							return HISPASAT30;
						case SatelliteEnum.HOTBIRD13:
							return HOTBIRD13;
						case SatelliteEnum.SES4:
							return SES4;
						case SatelliteEnum.SES5:
							return SES5;
						case SatelliteEnum.NotFound:
							return NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static SatelliteEnum ToEnum(string s)
				{
					switch (s)
					{
						case ABS3:
							return SatelliteEnum.ABS3;
						case ASTRA1:
							return SatelliteEnum.ASTRA1;
						case ASTRA2:
							return SatelliteEnum.ASTRA2;
						case ASTRA3:
							return SatelliteEnum.ASTRA3;
						case EUT3:
							return SatelliteEnum.EUT3;
						case EUT7:
							return SatelliteEnum.EUT7;
						case EUT9:
							return SatelliteEnum.EUT9;
						case EUT10:
							return SatelliteEnum.EUT10;
						case EUT16:
							return SatelliteEnum.EUT16;
						case EUT33:
							return SatelliteEnum.EUT33;
						case HISPASAT30:
							return SatelliteEnum.HISPASAT30;
						case HOTBIRD13:
							return SatelliteEnum.HOTBIRD13;
						case SES4:
							return SatelliteEnum.SES4;
						case SES5:
							return SatelliteEnum.SES5;
						case NotFound:
							return SatelliteEnum.NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum SatelliteEnum
			{
				ABS3,
				ASTRA1,
				ASTRA2,
				ASTRA3,
				EUT3,
				EUT7,
				EUT9,
				EUT10,
				EUT16,
				EUT33,
				HISPASAT30,
				HOTBIRD13,
				SES4,
				SES5,
				NotFound
			}

			public static class Uplinkpolarization
			{
				public const string Horizontal = "Horizontal";
				public const string Vertical = "Vertical";
				public const string NotFound = "Not found";
				public static string ToValue(UplinkpolarizationEnum @enum)
				{
					switch (@enum)
					{
						case UplinkpolarizationEnum.Horizontal:
							return Horizontal;
						case UplinkpolarizationEnum.Vertical:
							return Vertical;
						case UplinkpolarizationEnum.NotFound:
							return NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static UplinkpolarizationEnum ToEnum(string s)
				{
					switch (s)
					{
						case Horizontal:
							return UplinkpolarizationEnum.Horizontal;
						case Vertical:
							return UplinkpolarizationEnum.Vertical;
						case NotFound:
							return UplinkpolarizationEnum.NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum UplinkpolarizationEnum
			{
				Horizontal,
				Vertical,
				NotFound
			}

			public static class Downlinkpolarization
			{
				public const string Horizontal = "Horizontal";
				public const string Vertical = "Vertical";
				public const string NotFound = "Not found";
				public static string ToValue(DownlinkpolarizationEnum @enum)
				{
					switch (@enum)
					{
						case DownlinkpolarizationEnum.Horizontal:
							return Horizontal;
						case DownlinkpolarizationEnum.Vertical:
							return Vertical;
						case DownlinkpolarizationEnum.NotFound:
							return NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static DownlinkpolarizationEnum ToEnum(string s)
				{
					switch (s)
					{
						case Horizontal:
							return DownlinkpolarizationEnum.Horizontal;
						case Vertical:
							return DownlinkpolarizationEnum.Vertical;
						case NotFound:
							return DownlinkpolarizationEnum.NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum DownlinkpolarizationEnum
			{
				Horizontal,
				Vertical,
				NotFound
			}

			public static class Modulationstandard
			{
				public const string DVBS = "DVB-S";
				public const string DVBS2 = "DVB-S2";
				public const string DVBS2X = "DVB-S2X";
				public const string NS3 = "NS3";
				public const string NS4 = "NS4";
				public const string NotFound = "Not found";
				public static string ToValue(ModulationstandardEnum @enum)
				{
					switch (@enum)
					{
						case ModulationstandardEnum.DVBS:
							return DVBS;
						case ModulationstandardEnum.DVBS2:
							return DVBS2;
						case ModulationstandardEnum.DVBS2X:
							return DVBS2X;
						case ModulationstandardEnum.NS3:
							return NS3;
						case ModulationstandardEnum.NS4:
							return NS4;
						case ModulationstandardEnum.NotFound:
							return NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static ModulationstandardEnum ToEnum(string s)
				{
					switch (s)
					{
						case DVBS:
							return ModulationstandardEnum.DVBS;
						case DVBS2:
							return ModulationstandardEnum.DVBS2;
						case DVBS2X:
							return ModulationstandardEnum.DVBS2X;
						case NS3:
							return ModulationstandardEnum.NS3;
						case NS4:
							return ModulationstandardEnum.NS4;
						case NotFound:
							return ModulationstandardEnum.NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum ModulationstandardEnum
			{
				DVBS,
				DVBS2,
				DVBS2X,
				NS3,
				NS4,
				NotFound
			}

			public static class Rolloff
			{
				public const string _2 = "2%";
				public const string _5 = "5%";
				public const string _10 = "10%";
				public const string _15 = "15%";
				public const string _20 = "20%";
				public const string _25 = "25%";
				public const string _35 = "35%";
				public const string NotFound = "Not found";
				public static string ToValue(RolloffEnum @enum)
				{
					switch (@enum)
					{
						case RolloffEnum._2:
							return _2;
						case RolloffEnum._5:
							return _5;
						case RolloffEnum._10:
							return _10;
						case RolloffEnum._15:
							return _15;
						case RolloffEnum._20:
							return _20;
						case RolloffEnum._25:
							return _25;
						case RolloffEnum._35:
							return _35;
						case RolloffEnum.NotFound:
							return NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static RolloffEnum ToEnum(string s)
				{
					switch (s)
					{
						case _2:
							return RolloffEnum._2;
						case _5:
							return RolloffEnum._5;
						case _10:
							return RolloffEnum._10;
						case _15:
							return RolloffEnum._15;
						case _20:
							return RolloffEnum._20;
						case _25:
							return RolloffEnum._25;
						case _35:
							return RolloffEnum._35;
						case NotFound:
							return RolloffEnum.NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum RolloffEnum
			{
				_2,
				_5,
				_10,
				_15,
				_20,
				_25,
				_35,
				NotFound
			}

			public static class FEC
			{
				public const string _12 = "1/2";
				public const string _23 = "2/3";
				public const string _34 = "3/4";
				public const string _35 = "3/5";
				public const string _45 = "4/5";
				public const string _56 = "5/6";
				public const string _78 = "7/8";
				public const string _910 = "9/10";
				public const string NotFound = "Not found";
				public static string ToValue(FECEnum @enum)
				{
					switch (@enum)
					{
						case FECEnum._12:
							return _12;
						case FECEnum._23:
							return _23;
						case FECEnum._34:
							return _34;
						case FECEnum._35:
							return _35;
						case FECEnum._45:
							return _45;
						case FECEnum._56:
							return _56;
						case FECEnum._78:
							return _78;
						case FECEnum._910:
							return _910;
						case FECEnum.NotFound:
							return NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(@enum), @enum, "Invalid value.");
					}
				}

				public static FECEnum ToEnum(string s)
				{
					switch (s)
					{
						case _12:
							return FECEnum._12;
						case _23:
							return FECEnum._23;
						case _34:
							return FECEnum._34;
						case _35:
							return FECEnum._35;
						case _45:
							return FECEnum._45;
						case _56:
							return FECEnum._56;
						case _78:
							return FECEnum._78;
						case _910:
							return FECEnum._910;
						case NotFound:
							return FECEnum.NotFound;
						default:
							throw new ArgumentOutOfRangeException(nameof(s), s, "Invalid value.");
					}
				}
			}

			public enum FECEnum
			{
				_12,
				_23,
				_34,
				_35,
				_45,
				_56,
				_78,
				_910,
				NotFound
			}
		}

		public static class Sections
		{
			public static class ExtractedFeedEventInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("6eb9f75e-d090-4745-95e0-3c0c812e4ff3"))
				{ ModuleId = "satellitefeeds" };
				public static FieldDescriptorID EventName { get; } = new FieldDescriptorID(new Guid("9dc6785b-83fc-4d4a-a2aa-5c5e318959e5"));
				public static FieldDescriptorID StartDate { get; } = new FieldDescriptorID(new Guid("2952ab59-a7a0-49f0-949c-850ae32ad783"));
				public static FieldDescriptorID EndDate { get; } = new FieldDescriptorID(new Guid("1e2747d7-6d35-469a-b273-e9e778cbf37c"));
			}

			public static class MappedFeedParameters
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("26131715-09fa-4051-9609-387a12bfe8bb"))
				{ ModuleId = "satellitefeeds" };
				public static FieldDescriptorID Satellite { get; } = new FieldDescriptorID(new Guid("83775d5e-835b-4543-92f2-120139a32cb5"));
				public static FieldDescriptorID UplinkPolarization { get; } = new FieldDescriptorID(new Guid("fe66fa93-4bb7-4080-9100-04f520ad01b3"));
				public static FieldDescriptorID DownlinkPolarization { get; } = new FieldDescriptorID(new Guid("bce0d209-5c79-4dad-a545-a1b0d15b631a"));
				public static FieldDescriptorID ModulationStandard { get; } = new FieldDescriptorID(new Guid("1ccd3510-dabe-4aea-ba82-9e99aabbfcc1"));
				public static FieldDescriptorID UplinkFrequency { get; } = new FieldDescriptorID(new Guid("2e5c1263-5649-4f0e-bf2a-b77ed2bfc250"));
				public static FieldDescriptorID DownlinkFrequency { get; } = new FieldDescriptorID(new Guid("835efe15-3d31-4a2e-b269-8023b1282be1"));
				public static FieldDescriptorID SymbolRate { get; } = new FieldDescriptorID(new Guid("0dae5a84-a056-4a23-86e8-1ccef203160c"));
				public static FieldDescriptorID RollOff { get; } = new FieldDescriptorID(new Guid("2716c5f2-a058-47c6-8d4f-e0cd614b7572"));
				public static FieldDescriptorID FEC { get; } = new FieldDescriptorID(new Guid("99dab6a5-121f-42d6-a5e8-7fbb92920db8"));
			}

			public static class MappingInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("c2082747-988b-42cf-9363-9f6d52c4b49e"))
				{ ModuleId = "satellitefeeds" };
				public static FieldDescriptorID ExtractedFeedLink { get; } = new FieldDescriptorID(new Guid("210ef69d-5518-420a-a88d-50dde296b884"));
				public static FieldDescriptorID MappedFeedJSON { get; } = new FieldDescriptorID(new Guid("a76df14a-217a-446c-9d35-c4bcc8168e41"));
				public static FieldDescriptorID FileName { get; } = new FieldDescriptorID(new Guid("b09252b3-64df-4213-9e9c-a958cf6585ac"));
			}

			public static class MappedFeedEventInfo
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("53e9b878-9b57-4563-a0cd-a4984b781796"))
				{ ModuleId = "satellitefeeds" };
				public static FieldDescriptorID EventName { get; } = new FieldDescriptorID(new Guid("9ff099fa-eed1-4fe9-b694-14951fdaeda5"));
				public static FieldDescriptorID StartDate { get; } = new FieldDescriptorID(new Guid("349bf2b4-9b99-4034-8c6f-4127968388f1"));
				public static FieldDescriptorID EndDate { get; } = new FieldDescriptorID(new Guid("1c945ab8-f7fe-45e6-8d42-60fd30c1e108"));
			}

			public static class ExtractedFeedParameters
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("45006ff6-a6d8-4695-a04d-7ed0db101085"))
				{ ModuleId = "satellitefeeds" };
				public static FieldDescriptorID Satellite { get; } = new FieldDescriptorID(new Guid("4fd62805-e315-462d-81cd-10a5b094e722"));
				public static FieldDescriptorID UplinkPolarization { get; } = new FieldDescriptorID(new Guid("df405de4-27a7-446d-9935-a038a7c435ee"));
				public static FieldDescriptorID DownlinkPolarization { get; } = new FieldDescriptorID(new Guid("c51da1e2-16b8-47e0-92b5-ce4bd1c680e4"));
				public static FieldDescriptorID ModulationStandard { get; } = new FieldDescriptorID(new Guid("902c44de-b510-49f2-9abe-f261cafc057b"));
				public static FieldDescriptorID UplinkFrequency { get; } = new FieldDescriptorID(new Guid("6ff7468f-ca19-45ff-8956-97a704c0942b"));
				public static FieldDescriptorID DownlinkFrequency { get; } = new FieldDescriptorID(new Guid("961d050f-60d5-44d2-bdfe-5e5650325a7e"));
				public static FieldDescriptorID SymbolRate { get; } = new FieldDescriptorID(new Guid("8c8cbb18-41d1-4846-b622-15370bd2afa4"));
				public static FieldDescriptorID RollOff { get; } = new FieldDescriptorID(new Guid("e36fb8ad-865a-4387-a98c-ddc4a44e5d63"));
				public static FieldDescriptorID FEC { get; } = new FieldDescriptorID(new Guid("872c1386-3bbf-473b-a30f-799546f4f56b"));
			}

			public static class ExtractedFeedRawData
			{
				public static SectionDefinitionID Id { get; } = new SectionDefinitionID(new Guid("dabfe777-1d6d-4420-a371-e750122de220"))
				{ ModuleId = "satellitefeeds" };
				public static FieldDescriptorID JSON { get; } = new FieldDescriptorID(new Guid("fa85ce33-1341-4b55-bbcc-b2781056d03f"));
				public static FieldDescriptorID FileName { get; } = new FieldDescriptorID(new Guid("9c7b410b-f527-4fed-baf3-da109bc21dc1"));
			}
		}

		public static class Definitions
		{
			public static DomDefinitionId MappedFeed { get; } = new DomDefinitionId(new Guid("1662f8a4-534d-424f-819d-35da80ebe5ee"))
			{ ModuleId = "satellitefeeds" };
			public static DomDefinitionId ExtractedFeed { get; } = new DomDefinitionId(new Guid("d1c2bbb1-2986-47ed-a2b4-e1bf1f9e6a30"))
			{ ModuleId = "satellitefeeds" };
		}

		public static class Behaviors
		{
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.Satellitefeeds
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Messages;

	/// <summary>
	/// Represents a wrapper class for accessing a MappedFeedInstance DOM instance.
	/// The <see cref="MappedFeedInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class MappedFeedInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="MappedFeedInstance"/> class. Creates an empty <see cref="MappedFeedInstance"/> instance with default settings.
		/// </summary>
		public MappedFeedInstance() : base(SatellitefeedsIds.Definitions.MappedFeed)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="MappedFeedInstance"/> class. Creates an empty <see cref="MappedFeedInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public MappedFeedInstance(Guid id) : base(SatellitefeedsIds.Definitions.MappedFeed, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="MappedFeedInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="MappedFeedInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public MappedFeedInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SatellitefeedsIds.Definitions.MappedFeed))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SatellitefeedsIds.Definitions.MappedFeed)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the MappedFeedParameters section of the DOM Instance.
		/// </summary>
		public MappedFeedParametersSection MappedFeedParameters { get; set; }

		/// <summary>
		/// Gets or sets the MappingInfo section of the DOM Instance.
		/// </summary>
		public MappingInfoSection MappingInfo { get; set; }

		/// <summary>
		/// Gets or sets the MappedFeedEventInfo section of the DOM Instance.
		/// </summary>
		public MappedFeedEventInfoSection MappedFeedEventInfo { get; set; }

		public static explicit operator MappedFeedInstance(DomInstance instance)
		{
			return new MappedFeedInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			domInstance.Sections.Add(MappedFeedParameters.ToSection());
			domInstance.Sections.Add(MappingInfo.ToSection());
			domInstance.Sections.Add(MappedFeedEventInfo.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _mappedFeedParameters = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SatellitefeedsIds.Sections.MappedFeedParameters.Id));
			if (_mappedFeedParameters is null)
			{
				MappedFeedParameters = new MappedFeedParametersSection();
			}
			else
			{
				MappedFeedParameters = new MappedFeedParametersSection(_mappedFeedParameters);
			}

			var _mappingInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SatellitefeedsIds.Sections.MappingInfo.Id));
			if (_mappingInfo is null)
			{
				MappingInfo = new MappingInfoSection();
			}
			else
			{
				MappingInfo = new MappingInfoSection(_mappingInfo);
			}

			var _mappedFeedEventInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SatellitefeedsIds.Sections.MappedFeedEventInfo.Id));
			if (_mappedFeedEventInfo is null)
			{
				MappedFeedEventInfo = new MappedFeedEventInfoSection();
			}
			else
			{
				MappedFeedEventInfo = new MappedFeedEventInfoSection(_mappedFeedEventInfo);
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a ExtractedFeedInstance DOM instance.
	/// The <see cref="ExtractedFeedInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ExtractedFeedInstance : DomInstanceBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedInstance"/> class. Creates an empty <see cref="ExtractedFeedInstance"/> instance with default settings.
		/// </summary>
		public ExtractedFeedInstance() : base(SatellitefeedsIds.Definitions.ExtractedFeed)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedInstance"/> class. Creates an empty <see cref="ExtractedFeedInstance"/> instance with default settings and a specific ID.
		/// </summary>
		public ExtractedFeedInstance(Guid id) : base(SatellitefeedsIds.Definitions.ExtractedFeed, id)
		{
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
		/// </summary>
		/// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="ExtractedFeedInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ExtractedFeedInstance(DomInstance domInstance) : base(domInstance)
		{
			if (!domInstance.DomDefinitionId.Equals(SatellitefeedsIds.Definitions.ExtractedFeed))
				throw new ArgumentException($"The given domInstance, is not of type '{nameof(SatellitefeedsIds.Definitions.ExtractedFeed)}'", nameof(domInstance));
			InitializeProperties();
			AfterLoad();
		}

		/// <summary>
		/// Gets or sets the ExtractedFeedEventInfo section of the DOM Instance.
		/// </summary>
		public ExtractedFeedEventInfoSection ExtractedFeedEventInfo { get; set; }

		/// <summary>
		/// Gets or sets the ExtractedFeedParameters section of the DOM Instance.
		/// </summary>
		public ExtractedFeedParametersSection ExtractedFeedParameters { get; set; }

		/// <summary>
		/// Gets or sets the ExtractedFeedRawData section of the DOM Instance.
		/// </summary>
		public ExtractedFeedRawDataSection ExtractedFeedRawData { get; set; }

		public static explicit operator ExtractedFeedInstance(DomInstance instance)
		{
			return new ExtractedFeedInstance(instance);
		}

		/// <inheritdoc />
		protected override DomInstance InternalToInstance()
		{
			domInstance.Sections.Clear();
			domInstance.Sections.Add(ExtractedFeedEventInfo.ToSection());
			domInstance.Sections.Add(ExtractedFeedParameters.ToSection());
			domInstance.Sections.Add(ExtractedFeedRawData.ToSection());
			return domInstance;
		}

		/// <inheritdoc />
		public override void Save(DomHelper helper)
		{
			var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
			var instance = ToInstance();
			if (exist == null)
			{
				domInstance = helper.DomInstances.Create(instance);
			}
			else
			{
				domInstance = helper.DomInstances.Update(instance);
			}
		}

		protected override void InitializeProperties()
		{
			var _extractedFeedEventInfo = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.Id));
			if (_extractedFeedEventInfo is null)
			{
				ExtractedFeedEventInfo = new ExtractedFeedEventInfoSection();
			}
			else
			{
				ExtractedFeedEventInfo = new ExtractedFeedEventInfoSection(_extractedFeedEventInfo);
			}

			var _extractedFeedParameters = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SatellitefeedsIds.Sections.ExtractedFeedParameters.Id));
			if (_extractedFeedParameters is null)
			{
				ExtractedFeedParameters = new ExtractedFeedParametersSection();
			}
			else
			{
				ExtractedFeedParameters = new ExtractedFeedParametersSection(_extractedFeedParameters);
			}

			var _extractedFeedRawData = domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SatellitefeedsIds.Sections.ExtractedFeedRawData.Id));
			if (_extractedFeedRawData is null)
			{
				ExtractedFeedRawData = new ExtractedFeedRawDataSection();
			}
			else
			{
				ExtractedFeedRawData = new ExtractedFeedRawDataSection(_extractedFeedRawData);
			}
		}
	}
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.Satellitefeeds
{
	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Linq;
	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Apps.Sections.Sections;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Sections;

	/// <summary>
	/// Represents a wrapper class for accessing a ExtractedFeedEventInfoSection section.
	/// The <see cref="ExtractedFeedEventInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ExtractedFeedEventInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedEventInfoSection"/> class. Creates an empty <see cref="ExtractedFeedEventInfoSection"/> object with default settings.
		/// </summary>
		public ExtractedFeedEventInfoSection() : base(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedEventInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ExtractedFeedEventInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ExtractedFeedEventInfoSection(Section section) : base(section, SatellitefeedsIds.Sections.ExtractedFeedEventInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the EventName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String EventName
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.EventName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.EventName);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.EventName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the StartDate field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String StartDate
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.StartDate);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.StartDate);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.StartDate, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the EndDate field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String EndDate
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.EndDate);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.EndDate);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedEventInfo.EndDate, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a MappedFeedParametersSection section.
	/// The <see cref="MappedFeedParametersSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class MappedFeedParametersSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="MappedFeedParametersSection"/> class. Creates an empty <see cref="MappedFeedParametersSection"/> object with default settings.
		/// </summary>
		public MappedFeedParametersSection() : base(SatellitefeedsIds.Sections.MappedFeedParameters.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="MappedFeedParametersSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="MappedFeedParametersSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public MappedFeedParametersSection(Section section) : base(section, SatellitefeedsIds.Sections.MappedFeedParameters.Id)
		{
		}

		/// <summary>
		/// Gets or sets the Satellite field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SatellitefeedsIds.Enums.SatelliteEnum? Satellite
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappedFeedParameters.Satellite);
				if (wrapper != null)
				{
					return (SatellitefeedsIds.Enums.SatelliteEnum?)SatellitefeedsIds.Enums.Satellite.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.Satellite);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.Satellite, SatellitefeedsIds.Enums.Satellite.ToValue((SatellitefeedsIds.Enums.SatelliteEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the UplinkPolarization field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SatellitefeedsIds.Enums.UplinkpolarizationEnum? UplinkPolarization
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappedFeedParameters.UplinkPolarization);
				if (wrapper != null)
				{
					return (SatellitefeedsIds.Enums.UplinkpolarizationEnum?)SatellitefeedsIds.Enums.Uplinkpolarization.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.UplinkPolarization);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.UplinkPolarization, SatellitefeedsIds.Enums.Uplinkpolarization.ToValue((SatellitefeedsIds.Enums.UplinkpolarizationEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the DownlinkPolarization field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SatellitefeedsIds.Enums.DownlinkpolarizationEnum? DownlinkPolarization
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappedFeedParameters.DownlinkPolarization);
				if (wrapper != null)
				{
					return (SatellitefeedsIds.Enums.DownlinkpolarizationEnum?)SatellitefeedsIds.Enums.Downlinkpolarization.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.DownlinkPolarization);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.DownlinkPolarization, SatellitefeedsIds.Enums.Downlinkpolarization.ToValue((SatellitefeedsIds.Enums.DownlinkpolarizationEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the ModulationStandard field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SatellitefeedsIds.Enums.ModulationstandardEnum? ModulationStandard
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappedFeedParameters.ModulationStandard);
				if (wrapper != null)
				{
					return (SatellitefeedsIds.Enums.ModulationstandardEnum?)SatellitefeedsIds.Enums.Modulationstandard.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.ModulationStandard);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.ModulationStandard, SatellitefeedsIds.Enums.Modulationstandard.ToValue((SatellitefeedsIds.Enums.ModulationstandardEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the UplinkFrequency field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? UplinkFrequency
		{
			get
			{
				var wrapper = section.GetValue<Double>(SatellitefeedsIds.Sections.MappedFeedParameters.UplinkFrequency);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.UplinkFrequency);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.UplinkFrequency, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DownlinkFrequency field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? DownlinkFrequency
		{
			get
			{
				var wrapper = section.GetValue<Double>(SatellitefeedsIds.Sections.MappedFeedParameters.DownlinkFrequency);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.DownlinkFrequency);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.DownlinkFrequency, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the SymbolRate field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Double? SymbolRate
		{
			get
			{
				var wrapper = section.GetValue<Double>(SatellitefeedsIds.Sections.MappedFeedParameters.SymbolRate);
				if (wrapper != null)
				{
					return (Double?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.SymbolRate);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.SymbolRate, (Double)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the RollOff field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SatellitefeedsIds.Enums.RolloffEnum? RollOff
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappedFeedParameters.RollOff);
				if (wrapper != null)
				{
					return (SatellitefeedsIds.Enums.RolloffEnum?)SatellitefeedsIds.Enums.Rolloff.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.RollOff);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.RollOff, SatellitefeedsIds.Enums.Rolloff.ToValue((SatellitefeedsIds.Enums.RolloffEnum)value));
				}
			}
		}

		/// <summary>
		/// Gets or sets the FEC field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public SatellitefeedsIds.Enums.FECEnum? FEC
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappedFeedParameters.FEC);
				if (wrapper != null)
				{
					return (SatellitefeedsIds.Enums.FECEnum?)SatellitefeedsIds.Enums.FEC.ToEnum(wrapper.Value);
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedParameters.FEC);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedParameters.FEC, SatellitefeedsIds.Enums.FEC.ToValue((SatellitefeedsIds.Enums.FECEnum)value));
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a MappingInfoSection section.
	/// The <see cref="MappingInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class MappingInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="MappingInfoSection"/> class. Creates an empty <see cref="MappingInfoSection"/> object with default settings.
		/// </summary>
		public MappingInfoSection() : base(SatellitefeedsIds.Sections.MappingInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="MappingInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="MappingInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public MappingInfoSection(Section section) : base(section, SatellitefeedsIds.Sections.MappingInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the ExtractedFeedLink field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public Guid? ExtractedFeedLink
		{
			get
			{
				var wrapper = section.GetValue<Guid>(SatellitefeedsIds.Sections.MappingInfo.ExtractedFeedLink);
				if (wrapper != null)
				{
					return (Guid?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappingInfo.ExtractedFeedLink);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappingInfo.ExtractedFeedLink, (Guid)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the MappedFeedJSON field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String MappedFeedJSON
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappingInfo.MappedFeedJSON);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappingInfo.MappedFeedJSON);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappingInfo.MappedFeedJSON, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the FileName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String FileName
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappingInfo.FileName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappingInfo.FileName);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappingInfo.FileName, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a MappedFeedEventInfoSection section.
	/// The <see cref="MappedFeedEventInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class MappedFeedEventInfoSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="MappedFeedEventInfoSection"/> class. Creates an empty <see cref="MappedFeedEventInfoSection"/> object with default settings.
		/// </summary>
		public MappedFeedEventInfoSection() : base(SatellitefeedsIds.Sections.MappedFeedEventInfo.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="MappedFeedEventInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="MappedFeedEventInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public MappedFeedEventInfoSection(Section section) : base(section, SatellitefeedsIds.Sections.MappedFeedEventInfo.Id)
		{
		}

		/// <summary>
		/// Gets or sets the EventName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String EventName
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.MappedFeedEventInfo.EventName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedEventInfo.EventName);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedEventInfo.EventName, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the StartDate field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? StartDate
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SatellitefeedsIds.Sections.MappedFeedEventInfo.StartDate);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedEventInfo.StartDate);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedEventInfo.StartDate, (DateTime)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the EndDate field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public DateTime? EndDate
		{
			get
			{
				var wrapper = section.GetValue<DateTime>(SatellitefeedsIds.Sections.MappedFeedEventInfo.EndDate);
				if (wrapper != null)
				{
					return (DateTime?)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.MappedFeedEventInfo.EndDate);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.MappedFeedEventInfo.EndDate, (DateTime)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a ExtractedFeedParametersSection section.
	/// The <see cref="ExtractedFeedParametersSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ExtractedFeedParametersSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedParametersSection"/> class. Creates an empty <see cref="ExtractedFeedParametersSection"/> object with default settings.
		/// </summary>
		public ExtractedFeedParametersSection() : base(SatellitefeedsIds.Sections.ExtractedFeedParameters.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedParametersSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ExtractedFeedParametersSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ExtractedFeedParametersSection(Section section) : base(section, SatellitefeedsIds.Sections.ExtractedFeedParameters.Id)
		{
		}

		/// <summary>
		/// Gets or sets the Satellite field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String Satellite
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.Satellite);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.Satellite);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.Satellite, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the UplinkPolarization field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String UplinkPolarization
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.UplinkPolarization);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.UplinkPolarization);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.UplinkPolarization, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DownlinkPolarization field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String DownlinkPolarization
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.DownlinkPolarization);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.DownlinkPolarization);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.DownlinkPolarization, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the ModulationStandard field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String ModulationStandard
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.ModulationStandard);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.ModulationStandard);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.ModulationStandard, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the UplinkFrequency field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String UplinkFrequency
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.UplinkFrequency);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.UplinkFrequency);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.UplinkFrequency, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the DownlinkFrequency field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String DownlinkFrequency
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.DownlinkFrequency);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.DownlinkFrequency);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.DownlinkFrequency, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the SymbolRate field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String SymbolRate
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.SymbolRate);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.SymbolRate);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.SymbolRate, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the RollOff field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String RollOff
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.RollOff);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.RollOff);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.RollOff, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the FEC field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String FEC
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedParameters.FEC);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedParameters.FEC);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedParameters.FEC, (String)value);
				}
			}
		}
	}

	/// <summary>
	/// Represents a wrapper class for accessing a ExtractedFeedRawDataSection section.
	/// The <see cref="ExtractedFeedRawDataSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
	/// </summary>
	public partial class ExtractedFeedRawDataSection : DomSectionBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedRawDataSection"/> class. Creates an empty <see cref="ExtractedFeedRawDataSection"/> object with default settings.
		/// </summary>
		public ExtractedFeedRawDataSection() : base(SatellitefeedsIds.Sections.ExtractedFeedRawData.Id)
		{
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ExtractedFeedRawDataSection"/> class using the specified <paramref name="section"/> for initializing the object.
		/// </summary>
		/// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="ExtractedFeedRawDataSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
		public ExtractedFeedRawDataSection(Section section) : base(section, SatellitefeedsIds.Sections.ExtractedFeedRawData.Id)
		{
		}

		/// <summary>
		/// Gets or sets the JSON field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String JSON
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedRawData.JSON);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedRawData.JSON);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedRawData.JSON, (String)value);
				}
			}
		}

		/// <summary>
		/// Gets or sets the FileName field of the DOM Instance.
		/// </summary>
		/// <remarks>
		/// When retrieving the value:
		/// <list type="bullet">
		/// <item>If the field has been set, it will return the value.</item>
		/// <item>If the field is not set it will return <see langword="null"/>.</item>
		/// </list>
		/// When setting the value:
		/// <list type="bullet">
		/// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
		/// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
		/// </list>
		/// </remarks>
		public String FileName
		{
			get
			{
				var wrapper = section.GetValue<String>(SatellitefeedsIds.Sections.ExtractedFeedRawData.FileName);
				if (wrapper != null)
				{
					return (String)wrapper.Value;
				}
				else
				{
					return null;
				}
			}

			set
			{
				if (value == null)
				{
					section.RemoveFieldValueById(SatellitefeedsIds.Sections.ExtractedFeedRawData.FileName);
				}
				else
				{
					section.AddOrUpdateValue(SatellitefeedsIds.Sections.ExtractedFeedRawData.FileName, (String)value);
				}
			}
		}
	}
}
